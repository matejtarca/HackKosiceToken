"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var decimal_js_1 = require("decimal.js");
var operators_1 = require("rxjs/operators");
var GetAssetData_1 = require("../net/models/request/GetAssetData");
var GetAssets_1 = require("../net/models/request/GetAssets");
var GetRealSupply_1 = require("../net/models/request/GetRealSupply");
var ListAssets_1 = require("../net/models/request/ListAssets");
var LookupAssetSymbols_1 = require("../net/models/request/LookupAssetSymbols");
var PriceToDct_1 = require("../net/models/request/PriceToDct");
var BaseApi_1 = require("./BaseApi");
var AssetApi = /** @class */ (function (_super) {
    __extends(AssetApi, _super);
    function AssetApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get asset by id.
     *
     * @param assetId asset id eg. DCT id is 1.3.0
     *
     * @return asset or {@link ObjectNotFoundError}
     */
    AssetApi.prototype.get = function (assetId) {
        return this.getAll([assetId]).pipe(operators_1.map(function (list) { return list[0]; }));
    };
    /**
     * Get assets by id.
     *
     * @param assetIds asset id eg. DCT id is 1.3.0
     *
     * @return list of assets or {@link ObjectNotFoundError}
     */
    AssetApi.prototype.getAll = function (assetIds) {
        return this.request(new GetAssets_1.GetAssets(assetIds));
    };
    /**
     * Return current core asset supply.
     *
     * @return current supply
     */
    AssetApi.prototype.getRealSupply = function () {
        return this.api.request(new GetRealSupply_1.GetRealSupply());
    };
    /**
     * Get assets alphabetically by symbol name.
     *
     * @param lowerBound lower bound of symbol names to retrieve
     * @param limit maximum number of assets to fetch (must not exceed 100)
     *
     * @return the assets found
     */
    AssetApi.prototype.listAllRelative = function (lowerBound, limit) {
        if (limit === void 0) { limit = 100; }
        return this.api.request(new ListAssets_1.ListAssets(lowerBound, limit));
    };
    /**
     * Get asset by symbol
     *
     * @param assetSymbol asset symbol eg. DCT
     *
     * @return asset or {@link ObjectNotFoundError}
     */
    AssetApi.prototype.getByName = function (assetSymbol) {
        return this.getAllByName([assetSymbol]).pipe(operators_1.map(function (list) { return list[0]; }));
    };
    /**
     * Get assets by symbol
     *
     * @param assetSymbols asset symbols eg. DCT
     *
     * @return list of assets or {@link ObjectNotFoundError}
     */
    AssetApi.prototype.getAllByName = function (assetSymbols) {
        return this.request(new LookupAssetSymbols_1.LookupAssetSymbols(assetSymbols));
    };
    /**
     * Converts asset into DCT, using actual price feed.
     *
     * @param amount some amount
     *
     * @return price in DCT
     */
    AssetApi.prototype.convertToDct = function (amount) {
        return this.api.request(new PriceToDct_1.PriceToDct(amount));
    };
    /**
     * Get asset dynamic data by id.
     *
     * @param assetIds asset data id eg. DCT id is 2.3.0
     *
     * @return asset dynamic data or {@link ObjectNotFoundError}
     */
    AssetApi.prototype.getAssetsData = function (assetIds) {
        return this.request(new GetAssetData_1.GetAssetData(assetIds));
    };
    /**
     * Get asset by id and convert amount in DCT to this asset
     *
     * @param assetId asset id to get
     * @param amount amount to convert
     * @param roundingMode rounding mode to use when rounding to target asset precision
     */
    AssetApi.prototype.convertFromDCT = function (assetId, amount, roundingMode) {
        if (roundingMode === void 0) { roundingMode = decimal_js_1.Decimal.ROUND_CEIL; }
        return this.get(assetId).pipe(operators_1.map(function (asset) { return asset.convertFromDCT(amount, roundingMode); }));
    };
    /**
     * Get asset by id and convert amount in this asset to DCT
     *
     * @param assetId asset id to get
     * @param amount amount to convert
     * @param roundingMode rounding mode to use when rounding to target asset precision
     */
    AssetApi.prototype.convertToDCT = function (assetId, amount, roundingMode) {
        if (roundingMode === void 0) { roundingMode = decimal_js_1.Decimal.ROUND_CEIL; }
        return this.get(assetId).pipe(operators_1.map(function (asset) { return asset.convertToDCT(amount, roundingMode); }));
    };
    return AssetApi;
}(BaseApi_1.BaseApi));
exports.AssetApi = AssetApi;
//# sourceMappingURL=AssetApi.js.map