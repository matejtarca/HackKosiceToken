"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var AccountUpdateOperation_1 = require("../models/operation/AccountUpdateOperation");
var SearchMinerVotingOrder_1 = require("../models/order/SearchMinerVotingOrder");
var GetActualVotes_1 = require("../net/models/request/GetActualVotes");
var GetAssetPerBlock_1 = require("../net/models/request/GetAssetPerBlock");
var GetFeedsByMiner_1 = require("../net/models/request/GetFeedsByMiner");
var GetMinerByAccount_1 = require("../net/models/request/GetMinerByAccount");
var GetMinerCount_1 = require("../net/models/request/GetMinerCount");
var GetMiners_1 = require("../net/models/request/GetMiners");
var GetNewAssetPerBlock_1 = require("../net/models/request/GetNewAssetPerBlock");
var LookupMinerAccounts_1 = require("../net/models/request/LookupMinerAccounts");
var LookupVoteIds_1 = require("../net/models/request/LookupVoteIds");
var SearchMinerVoting_1 = require("../net/models/request/SearchMinerVoting");
var BaseApi_1 = require("./BaseApi");
var MiningApi = /** @class */ (function (_super) {
    __extends(MiningApi, _super);
    function MiningApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get the number of votes each miner actually has.
     *
     * @return a list mapping account names to the number of votes
     */
    MiningApi.prototype.getActualVotes = function () {
        return this.request(new GetActualVotes_1.GetActualVotes());
    };
    /**
     * Returns a reward for a miner from a specified block.
     *
     * @param blockNum block number
     *
     * @return amount of generated DCT
     */
    MiningApi.prototype.getAssetPerBlock = function (blockNum) {
        return this.request(new GetAssetPerBlock_1.GetAssetPerBlock(blockNum));
    };
    /**
     * Get a list of published price feeds by a miner.
     *
     * @param account account object id, 1.2.*
     * @param count maximum number of price feeds to fetch (must not exceed 100)
     *
     * @return a list of price feeds published by the miner
     *
     */
    // todo model
    MiningApi.prototype.getFeedsByMiner = function (account, count) {
        if (count === void 0) { count = 100; }
        return this.request(new GetFeedsByMiner_1.GetFeedsByMiner(account, count));
    };
    /**
     * Get the miner owned by a given account.
     *
     * @param account the account object id, 1.2.*, whose miner should be retrieved
     *
     * @return the miner object, or [ObjectNotFoundException] if the account does not have a miner
     */
    MiningApi.prototype.getMinerByAccount = function (account) {
        return this.request(new GetMinerByAccount_1.GetMinerByAccount(account));
    };
    /**
     * Get the total number of miners registered in DCore.
     *
     * @return number of miners
     */
    MiningApi.prototype.getMinerCount = function () {
        return this.request(new GetMinerCount_1.GetMinerCount());
    };
    /**
     * Returns list of miners by their Ids
     *
     * @param minerIds miner ids
     *
     * @return a list of miners
     */
    MiningApi.prototype.getMiners = function (minerIds) {
        return this.request(new GetMiners_1.GetMiners(minerIds));
    };
    /**
     * Returns map of the first 1000 miners by their name to miner account
     *
     * @return a map of miner name to miner account
     */
    MiningApi.prototype.getMinersToName = function () {
        var _this = this;
        return this.listMinersRelative().pipe(operators_1.flatMap(function (ids) { return _this.getMiners(ids.map(function (id) { return id.id; })).pipe(operators_1.map(function (miners) { return new Map(ids.map(function (id, idx) { return [id.name, miners[idx]]; })); })); }));
    };
    /**
     * Returns a reward for a miner from the most recent block.
     *
     * @return amount of newly generated DCT
     */
    MiningApi.prototype.getNewAssetPerBlock = function () {
        return this.request(new GetNewAssetPerBlock_1.GetNewAssetPerBlock());
    };
    /**
     * lookup names and IDs for registered miners
     *
     * @param lowerBound lower bound of the first name
     * @param limit max 1000
     *
     * @return list of found miner ids
     */
    MiningApi.prototype.listMinersRelative = function (lowerBound, limit) {
        if (lowerBound === void 0) { lowerBound = ""; }
        if (limit === void 0) { limit = 1000; }
        return this.request(new LookupMinerAccounts_1.LookupMinerAccounts(lowerBound, limit));
    };
    /**
     * Given a set of votes, return the objects they are voting for.
     * The results will be in the same order as the votes. null will be returned for any vote ids that are not found.
     *
     * @param voteIds set of votes
     *
     * @return a list of miners
     */
    MiningApi.prototype.findVotedMiners = function (voteIds) {
        return this.request(new LookupVoteIds_1.LookupVoteIds(voteIds));
    };
    /**
     * Get miner voting info list by account that match search term.
     *
     * @param searchTerm miner name
     * @param order available options are defined in [SearchMinerVotingOrder]
     * @param id the object id of the miner to start searching from, 1.4.* or null when start from beginning
     * @param accountName account name or null when searching without account
     * @param onlyMyVotes when true it selects only votes given by account
     * @param limit maximum number of miners info to fetch (must not exceed 1000)
     *
     * @return a list of miner voting info
     */
    MiningApi.prototype.findAllVotingInfo = function (searchTerm, order, id, accountName, onlyMyVotes, limit) {
        if (order === void 0) { order = SearchMinerVotingOrder_1.SearchMinerVotingOrder.NameDesc; }
        if (onlyMyVotes === void 0) { onlyMyVotes = false; }
        if (limit === void 0) { limit = 1000; }
        return this.request(new SearchMinerVoting_1.SearchMinerVoting(searchTerm, accountName, onlyMyVotes, order, id, limit));
    };
    /**
     * Create vote for miner operation.
     *
     * @param account account name or object id, 1.2.*
     * @param minerIds list of miner account ids
     *
     * @return a transaction confirmation
     */
    MiningApi.prototype.createVoteOperation = function (account, minerIds) {
        var _this = this;
        return this.getMiners(minerIds).pipe(operators_1.flatMap(function (miners) { return _this.api.accountApi.get(account)
            .pipe(operators_1.map(function (acc) { return AccountUpdateOperation_1.AccountUpdateOperation.create(acc, miners.map(function (m) { return m.voteId; })); })); }));
    };
    return MiningApi;
}(BaseApi_1.BaseApi));
exports.MiningApi = MiningApi;
//# sourceMappingURL=MiningApi.js.map