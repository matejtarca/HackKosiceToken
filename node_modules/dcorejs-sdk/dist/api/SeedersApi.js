"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Regions_1 = require("../models/Regions");
var GetSeeder_1 = require("../net/models/request/GetSeeder");
var ListSeedersByPrice_1 = require("../net/models/request/ListSeedersByPrice");
var ListSeedersByRating_1 = require("../net/models/request/ListSeedersByRating");
var ListSeedersByRegion_1 = require("../net/models/request/ListSeedersByRegion");
var ListSeedersByUpload_1 = require("../net/models/request/ListSeedersByUpload");
var BaseApi_1 = require("./BaseApi");
var SeedersApi = /** @class */ (function (_super) {
    __extends(SeedersApi, _super);
    function SeedersApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get a seeder by ID.
     * @param accountId seeder account object id
     *
     * @return a seeder object or {@link ObjectNotFoundError} if not found
     */
    SeedersApi.prototype.get = function (accountId) {
        return this.request(new GetSeeder_1.GetSeeder(accountId));
    };
    /**
     * Get a list of seeders by price, in increasing order.
     *
     * @param count number of items to retrieve, max 100
     *
     * @return a list of seeders
     */
    SeedersApi.prototype.listByPrice = function (count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListSeedersByPrice_1.ListSeedersByPrice(count));
    };
    /**
     * Get a list of seeders ordered by total upload, in decreasing order.
     *
     * @param count number of items to retrieve, max 100
     *
     * @return a list of seeders
     */
    SeedersApi.prototype.listByUpload = function (count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListSeedersByUpload_1.ListSeedersByUpload(count));
    };
    /**
     * Get a list of seeders ordered by price.
     *
     * @param region defined in {@link Regions}
     *
     * @return a list of seeders
     */
    SeedersApi.prototype.listByRegion = function (region) {
        if (region === void 0) { region = Regions_1.Regions.All; }
        return this.request(new ListSeedersByRegion_1.ListSeedersByRegion(region));
    };
    /**
     * Get a list of seeders by price, in decreasing order.
     *
     * @param count number of items to retrieve, max 100
     *
     * @return a list of seeders
     */
    SeedersApi.prototype.listByRating = function (count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListSeedersByRating_1.ListSeedersByRating(count));
    };
    return SeedersApi;
}(BaseApi_1.BaseApi));
exports.SeedersApi = SeedersApi;
//# sourceMappingURL=SeedersApi.js.map