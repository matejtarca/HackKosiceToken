"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CancelAllSubscriptions_1 = require("../net/models/request/CancelAllSubscriptions");
var SetBlockAppliedCallback_1 = require("../net/models/request/SetBlockAppliedCallback");
var SetContentUpdateCallback_1 = require("../net/models/request/SetContentUpdateCallback");
var SetPendingTransactionCallback_1 = require("../net/models/request/SetPendingTransactionCallback");
var SetSubscribeCallback_1 = require("../net/models/request/SetSubscribeCallback");
var BaseApi_1 = require("./BaseApi");
var CallbackApi = /** @class */ (function (_super) {
    __extends(CallbackApi, _super);
    function CallbackApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Stop receiving any notifications. This unsubscribes from all subscribed objects ({@link onGlobal} and {@link AccountApi.getFullAccounts}).
     */
    CallbackApi.prototype.cancelAll = function () {
        return this.request(new CancelAllSubscriptions_1.CancelAllSubscriptions());
    };
    /**
     * Receive new block notifications. Cannot be cancelled.
     */
    CallbackApi.prototype.onBlockApplied = function () {
        return this.request(new SetBlockAppliedCallback_1.SetBlockAppliedCallback());
    };
    /**
     * Receive notifications on content update. Cannot be cancelled.
     *
     * @param uri content URI to monitor
     */
    CallbackApi.prototype.onContentUpdate = function (uri) {
        return this.request(new SetContentUpdateCallback_1.SetContentUpdateCallback(uri));
    };
    /**
     * Receive notifications on pending transactions. Cannot be cancelled.
     */
    CallbackApi.prototype.onPendingTransaction = function () {
        return this.request(new SetPendingTransactionCallback_1.SetPendingTransactionCallback());
    };
    /**
     * Subscribe to callbacks. Can be cancelled. with [cancelAll].
     *
     * @param clearFilter clear current subscriptions created with {@link AccountApi.getFullAccounts}
     */
    CallbackApi.prototype.onGlobal = function (clearFilter) {
        return this.request(new SetSubscribeCallback_1.SetSubscribeCallback(clearFilter));
    };
    return CallbackApi;
}(BaseApi_1.BaseApi));
exports.CallbackApi = CallbackApi;
//# sourceMappingURL=CallbackApi.js.map