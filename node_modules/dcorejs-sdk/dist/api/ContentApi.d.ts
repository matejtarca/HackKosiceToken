import { Observable } from "rxjs";
import { Credentials } from "../crypto/Credentials";
import { DCoreApi } from "../DCoreApi";
import { AssetAmount } from "../models/AssetAmount";
import { ChainObject } from "../models/ChainObject";
import { Content } from "../models/Content";
import { ContentKeys } from "../models/ContentKeys";
import { PurchaseContentOperation } from "../models/operation/PurchaseContentOperation";
import { TransferOperation } from "../models/operation/TransferOperation";
import { SearchContentOrder } from "../models/order/SearchContentOrder";
import { PubKey } from "../models/PubKey";
import { BaseApi } from "./BaseApi";
export declare class ContentApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Generate keys for new content submission.
     *
     * @param seeders list of seeder account IDs
     *
     * @return generated key and key parts
     */
    generateKeys(seeders: ChainObject[]): Observable<ContentKeys>;
    /**
     * Get content
     *
     * @param content uri of the content or object id of the content, 2.13.*
     *
     * @return a content if found, {@link ObjectNotFoundError} otherwise
     */
    get(content: ChainObject | string): Observable<Content>;
    /**
     * Get a list of accounts holding publishing manager status.
     *
     * @param lowerBound the name of the first account to return. If the named account does not exist, the list will start at the account that comes after lowerbound
     * @param limit the maximum number of accounts to return (max: 100)
     *
     * @return a list of publishing managers
     */
    listAllPublishersRelative(lowerBound: string, limit?: number): Observable<ChainObject[]>;
    /**
     * Restores encryption key from key parts stored in buying object.
     *
     * @param elGamalPrivate the private El Gamal key
     * @param purchaseId the purchase object
     *
     * @return AES encryption key
     */
    restoreEncryptionKey(elGamalPrivate: PubKey, purchaseId: ChainObject): Observable<string>;
    /**
     * Search for term in contents (author, title and description).
     *
     * @param term search term
     * @param order ordering field. Available options are defined in {@link SearchContentOrder}
     * @param user content owner account name
     * @param regionCode two letter region code, defined in [Regions]
     * @param type the application and content type to be filtered, use {@link contentType} method
     * @param startId the id of content object to start searching from
     * @param limit maximum number of contents to fetch (must not exceed 100)
     *
     * @return the contents found
     */
    findAll(term: string, order?: SearchContentOrder, user?: string, regionCode?: string, type?: string, startId?: ChainObject, limit?: number): Observable<Content[]>;
    /**
     * Create a purchase content operation.
     *
     * @param credentials account credentials
     * @param content uri of the content or object id of the content, 2.13.*
     */
    createPurchaseOperation(credentials: Credentials, content: ChainObject): Observable<PurchaseContentOperation>;
    /**
     * Transfers an amount of one asset to content. Amount is transferred to author and co-authors of the content, if they are specified.
     * Fees are paid by the "from" account.
     *
     * @param credentials account credentials
     * @param id content id
     * @param amount amount to send with asset type
     * @param memo optional unencrypted message
     * @param fee {@link AssetAmount} fee for the operation, if left undefined the fee will be computed in DCT asset
     *
     * @return a transaction confirmation
     */
    createTransfer(credentials: Credentials, id: ChainObject, amount: AssetAmount, memo?: string, fee?: AssetAmount): TransferOperation;
}
