import { Duration } from "moment";
import { Observable } from "rxjs";
import { ECKeyPair } from "../crypto/ECKeyPair";
import { DCoreApi } from "../DCoreApi";
import { BaseOperation } from "../models/operation/BaseOperation";
import { Transaction } from "../models/Transaction";
import { TransactionConfirmation } from "../models/TransactionConfirmation";
import { BaseApi } from "./BaseApi";
export declare class BroadcastApi extends BaseApi {
    private static getPrivate;
    constructor(api: DCoreApi);
    /**
     * broadcast transaction to DCore
     * @param transaction transaction to broadcast
     */
    broadcastTrx(transaction: Transaction): Observable<any>;
    /**
     * Broadcast operation to DCore
     *
     * @param privateKey EC key pair or Base58 encoded private key
     * @param operations operations to be submitted to DCore
     * @param expiration transaction expiration in seconds, after the expiry the transaction is removed from recent pool and will be dismissed if not included in DCore block
     */
    broadcast(privateKey: ECKeyPair | string, operations: BaseOperation[], expiration?: Duration): Observable<void>;
    /**
     * Broadcast transaction to DCore with callback
     * @param transaction transaction to broadcast
     *
     * @return a transaction confirmation
     */
    broadcastTrxWithCallback(transaction: Transaction): Observable<TransactionConfirmation>;
    /**
     * Broadcast operation to DCore
     *
     * @param privateKey EC key pair or Base58 encoded private key
     * @param operations operations to be submitted to DCore
     * @param expiration transaction expiration in seconds, after the expiry the transaction is removed from recent pool and will be dismissed if not included in DCore block
     *
     * @return a transaction confirmation
     */
    broadcastWithCallback(privateKey: ECKeyPair | string, operations: BaseOperation[], expiration?: Duration): Observable<TransactionConfirmation>;
}
