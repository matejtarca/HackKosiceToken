"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var DCoreConstants_1 = require("../DCoreConstants");
var ChainObject_1 = require("../models/ChainObject");
var GetAccountBalances_1 = require("../net/models/request/GetAccountBalances");
var GetNamedAccountBalances_1 = require("../net/models/request/GetNamedAccountBalances");
var GetVestingBalances_1 = require("../net/models/request/GetVestingBalances");
var BaseApi_1 = require("./BaseApi");
var BalanceApi = /** @class */ (function (_super) {
    __extends(BalanceApi, _super);
    function BalanceApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get account balance.
     *
     * @param account account name or account object id, 1.2.*
     * @param asset object id of the assets, 1.3.*
     *
     * @return amount for asset
     */
    BalanceApi.prototype.get = function (account, asset) {
        return this.getAll(account, [asset]).pipe(operators_1.map(function (list) { return list[0]; }));
    };
    /**
     * Get account balances.
     *
     * @param account account name or account object id, 1.2.*
     * @param assets object ids of the assets, 1.3.*
     *
     * @return list of amounts for different assets
     */
    BalanceApi.prototype.getAll = function (account, assets) {
        return this.getBalanceInternal(account, assets);
    };
    /**
     * Get account balance with asset.
     *
     * @param account account name or account object id, 1.2.*
     * @param assetSymbol asset symbol, eg. DCT
     *
     * @return a pair of asset to amount
     */
    BalanceApi.prototype.getWithAsset = function (account, assetSymbol) {
        if (assetSymbol === void 0) { assetSymbol = DCoreConstants_1.DCoreConstants.DCT_ASSET_SYMBOL; }
        return this.getAllWithAsset(account, [assetSymbol]).pipe(operators_1.map(function (list) { return list[0]; }));
    };
    /**
     * Get account balance with asset.
     *
     * @param account account name or account object id, 1.2.*
     * @param assetSymbols asset symbols, eg. DCT
     *
     * @return a list of pairs of assets to amounts
     */
    BalanceApi.prototype.getAllWithAsset = function (account, assetSymbols) {
        var _this = this;
        return this.api.assetApi.getAllByName(assetSymbols)
            .pipe(operators_1.flatMap(function (assets) { return _this.getAll(account, assets.map(function (asset) { return asset.id; }))
            .pipe(operators_1.map(function (balances) { return _this.createTuple(assets, balances); })); }));
    };
    /**
     * Get information about a vesting balance object.
     *
     * @param accountId id of the account
     *
     * @return a list of vesting balances with additional information
     */
    BalanceApi.prototype.getAllVesting = function (accountId) {
        return this.api.request(new GetVestingBalances_1.GetVestingBalances(accountId));
    };
    BalanceApi.prototype.createTuple = function (assets, balances) {
        return assets.map(function (asset) { return [asset, balances.find(function (balance) { return balance.assetId.eq(asset.id); })]; });
    };
    BalanceApi.prototype.getBalanceInternal = function (account, assets) {
        if (typeof account === "string" && ChainObject_1.ChainObject.isValid(account)) {
            return this.getBalanceInternal(ChainObject_1.ChainObject.parse(account), assets);
        }
        else if (typeof account === "string") {
            return this.request(new GetNamedAccountBalances_1.GetNamedAccountBalances(account, assets));
        }
        else {
            return this.request(new GetAccountBalances_1.GetAccountBalances(account, assets));
        }
    };
    return BalanceApi;
}(BaseApi_1.BaseApi));
exports.BalanceApi = BalanceApi;
//# sourceMappingURL=BalanceApi.js.map