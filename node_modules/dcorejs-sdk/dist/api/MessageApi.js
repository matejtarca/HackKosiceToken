"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var class_transformer_1 = require("class-transformer");
var _ = require("lodash");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var Memo_1 = require("../models/Memo");
var Message_1 = require("../models/Message");
var MessagePayload_1 = require("../models/MessagePayload");
var MessagePayloadReceiver_1 = require("../models/MessagePayloadReceiver");
var SendMessageOperation_1 = require("../models/operation/SendMessageOperation");
var GetMessagesObjects_1 = require("../net/models/request/GetMessagesObjects");
var Utils_1 = require("../utils/Utils");
var BaseApi_1 = require("./BaseApi");
var MessageApi = /** @class */ (function (_super) {
    __extends(MessageApi, _super);
    function MessageApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get all message operations
     *
     * @param sender filter by sender account id
     * @param receiver filter by receiver account id
     * @param maxCount max items to return
     *
     * @return list of message operation responses
     */
    MessageApi.prototype.getAllOperations = function (sender, receiver, maxCount) {
        if (maxCount === void 0) { maxCount = 1000; }
        return this.request(new GetMessagesObjects_1.GetMessagesObjects(sender, receiver, maxCount));
    };
    /**
     * Get all messages
     *
     * @param sender filter by sender account id
     * @param receiver filter by receiver account id
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    MessageApi.prototype.getAll = function (sender, receiver, maxCount) {
        if (maxCount === void 0) { maxCount = 1000; }
        return this.getAllOperations(sender, receiver, maxCount).pipe(operators_1.map(function (list) { return _.flatten(list.map(function (r) { return Message_1.Message.create(r); })); }));
    };
    /**
     * Get all messages and decrypt
     *
     * @param credentials account credentials used for decryption, must be either sender's or receiver's
     * @param sender filter by sender account id
     * @param receiver filter by receiver account id
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    MessageApi.prototype.getAllDecrypted = function (credentials, sender, receiver, maxCount) {
        if (maxCount === void 0) { maxCount = 1000; }
        Utils_1.assertThrow(credentials.account.eq(sender) || credentials.account.eq(receiver), function () { return "credentials account id must match either sender id or receiver id "; });
        return this.getAll(sender, receiver, maxCount).pipe(operators_1.map(function (list) { return list.map(function (msg) { return msg.decrypt(credentials); }); }));
    };
    /**
     * Get all messages for sender and decrypt
     *
     * @param credentials sender account credentials with decryption keys
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    MessageApi.prototype.getAllDecryptedForSender = function (credentials, maxCount) {
        if (maxCount === void 0) { maxCount = 1000; }
        return this.getAllDecrypted(credentials, credentials.account, undefined, maxCount);
    };
    /**
     * Get all messages for receiver and decrypt
     *
     * @param credentials receiver account credentials with decryption keys
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    MessageApi.prototype.getAllDecryptedForReceiver = function (credentials, maxCount) {
        if (maxCount === void 0) { maxCount = 1000; }
        return this.getAllDecrypted(credentials, undefined, credentials.account, maxCount);
    };
    /**
     * Create message operation, send messages to multiple receivers
     *
     * @param credentials sender account credentials
     * @param messages a list of pairs of receiver account id and message
     *
     * @return send message operation
     */
    MessageApi.prototype.createMessageOperation = function (credentials, messages) {
        return rxjs_1.zip(this.api.accountApi.get(credentials.account), this.api.accountApi.getAll(messages.map(function (_a) {
            var id = _a[0], msg = _a[1];
            return id;
        }))).pipe(operators_1.map(function (_a) {
            var sender = _a[0], recipients = _a[1];
            var payloadRecipients = recipients.map(function (r, idx) {
                var memo = Memo_1.Memo.createEncrypted(messages[idx][1], credentials.keyPair, r.options.memoKey);
                return new MessagePayloadReceiver_1.MessagePayloadReceiver(r.id, memo.message, memo.to, memo.nonce);
            });
            var data = new MessagePayload_1.MessagePayload(sender.id, payloadRecipients, sender.options.memoKey);
            return new SendMessageOperation_1.SendMessageOperation(class_transformer_1.serialize(data), credentials.account);
        }));
    };
    /**
     * Create message operation, send messages to multiple receivers, unencrypted
     *
     * @param credentials sender account credentials
     * @param messages a list of pairs of receiver account id and message
     *
     * @return send message operation
     */
    MessageApi.prototype.createMessageOperationUnencrypted = function (credentials, messages) {
        return new SendMessageOperation_1.SendMessageOperation(class_transformer_1.serialize(MessagePayload_1.MessagePayload.createUnencrypted(credentials.account, messages)), credentials.account);
    };
    return MessageApi;
}(BaseApi_1.BaseApi));
exports.MessageApi = MessageApi;
//# sourceMappingURL=MessageApi.js.map