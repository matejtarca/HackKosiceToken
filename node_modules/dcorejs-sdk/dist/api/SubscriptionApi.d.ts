import { Observable } from "rxjs";
import { DCoreApi } from "../DCoreApi";
import { ChainObject } from "../models/ChainObject";
import { Subscription } from "../models/Subscription";
import { BaseApi } from "./BaseApi";
export declare class SubscriptionApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Get a subscription object by ID.
     *
     * @param id subscription object id, 2.15.*
     *
     * @return the subscription object corresponding to the provided ID, [ObjectNotFoundException] otherwise
     */
    get(id: ChainObject): Observable<Subscription>;
    /**
     * Get a list of active (not expired) subscriptions by account (consumer).
     *
     * @param consumer consumer account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of active subscription objects
     */
    getAllActiveByConsumer(consumer: ChainObject, count?: number): Observable<Subscription[]>;
    /**
     * Get a list of active (not expired) subscriptions by account (author).
     *
     * @param author author account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of active subscription objects
     */
    getAllActiveByAuthor(author: ChainObject, count?: number): Observable<Subscription[]>;
    /**
     * Get a list of subscriptions by account (consumer).
     *
     * @param consumer consumer account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of subscription objects
     */
    getAllByConsumer(consumer: ChainObject, count?: number): Observable<Subscription[]>;
    /**
     * Get a list of subscriptions by account (author).
     *
     * @param author author account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of subscription objects
     */
    getAllByAuthor(author: ChainObject, count?: number): Observable<Subscription[]>;
}
