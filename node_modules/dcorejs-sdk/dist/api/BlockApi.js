"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GetBlock_1 = require("../net/models/request/GetBlock");
var GetBlockHeader_1 = require("../net/models/request/GetBlockHeader");
var HeadBlockTime_1 = require("../net/models/request/HeadBlockTime");
var BaseApi_1 = require("./BaseApi");
var BlockApi = /** @class */ (function (_super) {
    __extends(BlockApi, _super);
    function BlockApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Retrieve a full, signed block.
     *
     * @param blockNum height of the block to be returned
     *
     * @return the referenced block, or {@link ObjectNotFoundError} if no matching block was found
     */
    BlockApi.prototype.get = function (blockNum) {
        return this.request(new GetBlock_1.GetBlock(blockNum));
    };
    /**
     * Retrieve a block header.
     *
     * @param blockNum height of the block whose header should be returned
     *
     * @return header of the referenced block, or {@link ObjectNotFoundError} if no matching block was found
     */
    BlockApi.prototype.getHeader = function (blockNum) {
        return this.request(new GetBlockHeader_1.GetBlockHeader(blockNum));
    };
    /**
     * Query the last local block.
     *
     * @return the block time
     */
    BlockApi.prototype.getHeadTime = function () {
        return this.request(new HeadBlockTime_1.HeadBlockTime());
    };
    return BlockApi;
}(BaseApi_1.BaseApi));
exports.BlockApi = BlockApi;
//# sourceMappingURL=BlockApi.js.map