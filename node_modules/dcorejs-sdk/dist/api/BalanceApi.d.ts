import { Observable } from "rxjs";
import { DCoreApi } from "../DCoreApi";
import { AccountRef, AssetWithAmount } from "../DCoreSdk";
import { AssetAmount } from "../models/AssetAmount";
import { ChainObject } from "../models/ChainObject";
import { VestingBalance } from "../models/VestingBalance";
import { BaseApi } from "./BaseApi";
export declare class BalanceApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Get account balance.
     *
     * @param account account name or account object id, 1.2.*
     * @param asset object id of the assets, 1.3.*
     *
     * @return amount for asset
     */
    get(account: AccountRef, asset: ChainObject): Observable<AssetAmount>;
    /**
     * Get account balances.
     *
     * @param account account name or account object id, 1.2.*
     * @param assets object ids of the assets, 1.3.*
     *
     * @return list of amounts for different assets
     */
    getAll(account: AccountRef, assets?: ChainObject[]): Observable<AssetAmount[]>;
    /**
     * Get account balance with asset.
     *
     * @param account account name or account object id, 1.2.*
     * @param assetSymbol asset symbol, eg. DCT
     *
     * @return a pair of asset to amount
     */
    getWithAsset(account: AccountRef, assetSymbol?: string): Observable<AssetWithAmount>;
    /**
     * Get account balance with asset.
     *
     * @param account account name or account object id, 1.2.*
     * @param assetSymbols asset symbols, eg. DCT
     *
     * @return a list of pairs of assets to amounts
     */
    getAllWithAsset(account: AccountRef, assetSymbols: string[]): Observable<AssetWithAmount[]>;
    /**
     * Get information about a vesting balance object.
     *
     * @param accountId id of the account
     *
     * @return a list of vesting balances with additional information
     */
    getAllVesting(accountId: ChainObject): Observable<VestingBalance[]>;
    private createTuple;
    private getBalanceInternal;
}
