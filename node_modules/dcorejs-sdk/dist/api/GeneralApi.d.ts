import { Moment } from "moment";
import { Observable } from "rxjs";
import { DCoreApi } from "../DCoreApi";
import { ChainProperties } from "../models/ChainProperties";
import { DynamicGlobalProperties } from "../models/DynamicGlobalProperties";
import { GlobalProperties } from "../models/GlobalProperties";
import { MinerRewardInput } from "../models/MinerRewardInput";
import { BaseApi } from "./BaseApi";
export declare class GeneralApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Retrieve properties associated with the chain.
     *
     * @return chain id and immutable chain parameters
     */
    getChainProperties(): Observable<ChainProperties>;
    /**
     * Retrieve global properties. This object contains all of the properties of the blockchain that are fixed
     * or that change only once per maintenance interval such as the current list of miners, block interval, etc.
     *
     * @return global property object
     */
    getGlobalProperties(): Observable<GlobalProperties>;
    /**
     * Retrieve compile-time constants.
     *
     * @return configured constants
     */
    getConfig(): Observable<object>;
    /**
     * Get the chain ID.
     *
     * @return the chain ID identifying blockchain network
     */
    getChainId(): Observable<string>;
    /**
     * Retrieve the dynamic properties. The returned object contains information that changes every block interval,
     * such as the head block number, the next miner, etc.
     *
     * @return dynamic property object
     */
    getDynamicGlobalProperties(): Observable<DynamicGlobalProperties>;
    /**
     * Get remaining time to next maintenance interval from given time.
     *
     * @param time reference time
     *
     * @return remaining time to next maintenance interval along with some additional data
     */
    getTimeToMaintenance(time: Moment): Observable<MinerRewardInput>;
}
