import * as Long from "long";
import { Observable } from "rxjs";
import { DCoreApi } from "../DCoreApi";
import { AccountRef } from "../DCoreSdk";
import { ChainObject } from "../models/ChainObject";
import { Miner } from "../models/Miner";
import { MinerId } from "../models/MinerId";
import { MinerVotes } from "../models/MinerVotes";
import { MinerVotingInfo } from "../models/MinerVotingInfo";
import { AccountUpdateOperation } from "../models/operation/AccountUpdateOperation";
import { SearchMinerVotingOrder } from "../models/order/SearchMinerVotingOrder";
import { VoteId } from "../models/VoteId";
import { BaseApi } from "./BaseApi";
export declare class MiningApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Get the number of votes each miner actually has.
     *
     * @return a list mapping account names to the number of votes
     */
    getActualVotes(): Observable<MinerVotes[]>;
    /**
     * Returns a reward for a miner from a specified block.
     *
     * @param blockNum block number
     *
     * @return amount of generated DCT
     */
    getAssetPerBlock(blockNum: Long): Observable<Long>;
    /**
     * Get a list of published price feeds by a miner.
     *
     * @param account account object id, 1.2.*
     * @param count maximum number of price feeds to fetch (must not exceed 100)
     *
     * @return a list of price feeds published by the miner
     *
     */
    getFeedsByMiner(account: ChainObject, count?: number): Observable<object>;
    /**
     * Get the miner owned by a given account.
     *
     * @param account the account object id, 1.2.*, whose miner should be retrieved
     *
     * @return the miner object, or [ObjectNotFoundException] if the account does not have a miner
     */
    getMinerByAccount(account: ChainObject): Observable<Miner>;
    /**
     * Get the total number of miners registered in DCore.
     *
     * @return number of miners
     */
    getMinerCount(): Observable<Long>;
    /**
     * Returns list of miners by their Ids
     *
     * @param minerIds miner ids
     *
     * @return a list of miners
     */
    getMiners(minerIds: ChainObject[]): Observable<Miner[]>;
    /**
     * Returns map of the first 1000 miners by their name to miner account
     *
     * @return a map of miner name to miner account
     */
    getMinersToName(): Observable<Map<string, Miner>>;
    /**
     * Returns a reward for a miner from the most recent block.
     *
     * @return amount of newly generated DCT
     */
    getNewAssetPerBlock(): Observable<Long>;
    /**
     * lookup names and IDs for registered miners
     *
     * @param lowerBound lower bound of the first name
     * @param limit max 1000
     *
     * @return list of found miner ids
     */
    listMinersRelative(lowerBound?: string, limit?: number): Observable<MinerId[]>;
    /**
     * Given a set of votes, return the objects they are voting for.
     * The results will be in the same order as the votes. null will be returned for any vote ids that are not found.
     *
     * @param voteIds set of votes
     *
     * @return a list of miners
     */
    findVotedMiners(voteIds: VoteId[]): Observable<Miner[]>;
    /**
     * Get miner voting info list by account that match search term.
     *
     * @param searchTerm miner name
     * @param order available options are defined in [SearchMinerVotingOrder]
     * @param id the object id of the miner to start searching from, 1.4.* or null when start from beginning
     * @param accountName account name or null when searching without account
     * @param onlyMyVotes when true it selects only votes given by account
     * @param limit maximum number of miners info to fetch (must not exceed 1000)
     *
     * @return a list of miner voting info
     */
    findAllVotingInfo(searchTerm: string, order?: SearchMinerVotingOrder, id?: ChainObject, accountName?: string, onlyMyVotes?: boolean, limit?: number): Observable<MinerVotingInfo[]>;
    /**
     * Create vote for miner operation.
     *
     * @param account account name or object id, 1.2.*
     * @param minerIds list of miner account ids
     *
     * @return a transaction confirmation
     */
    createVoteOperation(account: AccountRef, minerIds: ChainObject[]): Observable<AccountUpdateOperation>;
}
