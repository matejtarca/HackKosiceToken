"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ObjectType_1 = require("../models/ObjectType");
var SearchPurchasesOrder_1 = require("../models/order/SearchPurchasesOrder");
var GetBuyingByUri_1 = require("../net/models/request/GetBuyingByUri");
var GetHistoryBuyingsByConsumer_1 = require("../net/models/request/GetHistoryBuyingsByConsumer");
var GetOpenBuyings_1 = require("../net/models/request/GetOpenBuyings");
var GetOpenBuyingsByConsumer_1 = require("../net/models/request/GetOpenBuyingsByConsumer");
var GetOpenBuyingsByUri_1 = require("../net/models/request/GetOpenBuyingsByUri");
var SearchBuyings_1 = require("../net/models/request/SearchBuyings");
var SearchFeedback_1 = require("../net/models/request/SearchFeedback");
var BaseApi_1 = require("./BaseApi");
var PurchaseApi = /** @class */ (function (_super) {
    __extends(PurchaseApi, _super);
    function PurchaseApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get a list of history purchases for consumer id.
     *
     * @param accountId consumer account object id, 1.2.*
     *
     * @return a list of history purchases
     */
    PurchaseApi.prototype.getAllHistory = function (accountId) {
        return this.request(new GetHistoryBuyingsByConsumer_1.GetHistoryBuyingsByConsumer(accountId));
    };
    /**
     * Get a list of open purchases.
     *
     * @return a list of open purchases
     */
    PurchaseApi.prototype.getAllOpen = function () {
        return this.request(new GetOpenBuyings_1.GetOpenBuyings());
    };
    /**
     * Get a list of open purchases for content URI.
     *
     * @param uri content uri
     *
     * @return a list of open purchases
     */
    PurchaseApi.prototype.getAllOpenByUri = function (uri) {
        return this.request(new GetOpenBuyingsByUri_1.GetOpenBuyingsByUri(uri));
    };
    /**
     * Get a list of open purchases for consumer id.
     *
     * @param accountId consumer account object id, 1.2.*
     *
     * @return a list of open purchases
     */
    PurchaseApi.prototype.getAllOpenByAccount = function (accountId) {
        return this.request(new GetOpenBuyingsByConsumer_1.GetOpenBuyingsByConsumer(accountId));
    };
    /**
     * Get consumer purchase by content uri.
     *
     * @param consumer object id of the account, 1.2.*
     * @param uri a uri of the content
     *
     * @return an account if found, {@link ObjectNotFoundError} otherwise
     */
    PurchaseApi.prototype.get = function (consumer, uri) {
        return this.request(new GetBuyingByUri_1.GetBuyingByUri(consumer, uri));
    };
    /**
     * Search consumer open and history purchases.
     *
     * @param consumer object id of the account, 1.2.*
     * @param term search term
     * @param from object id of the history object to start from, use {@link ObjectType.Null.genericId} to ignore
     * @param order order defined by {@link SearchPurchasesOrder}
     * @param limit number of entries, max 100
     *
     * @return list of purchases
     */
    PurchaseApi.prototype.findAll = function (consumer, term, from, order, limit) {
        if (from === void 0) { from = ObjectType_1.ObjectType.Null.genericId(); }
        if (order === void 0) { order = SearchPurchasesOrder_1.SearchPurchasesOrder.PurchasedDesc; }
        if (limit === void 0) { limit = 100; }
        return this.request(new SearchBuyings_1.SearchBuyings(consumer, term, order, from, limit));
    };
    /**
     * Search for feedback.
     *
     * @param uri content URI
     * @param user feedback author account name
     * @param count maximum number of feedback objects to fetch
     * @param startId the id of purchase object to start searching from
     *
     * @return a list of purchase objects
     */
    // todo wait for add feedback OP so we can test
    PurchaseApi.prototype.findAllForFeedback = function (uri, user, count, startId) {
        if (count === void 0) { count = 100; }
        if (startId === void 0) { startId = ObjectType_1.ObjectType.Null.genericId(); }
        return this.request(new SearchFeedback_1.SearchFeedback(uri, user, startId, count));
    };
    return PurchaseApi;
}(BaseApi_1.BaseApi));
exports.PurchaseApi = PurchaseApi;
//# sourceMappingURL=PurchaseApi.js.map