import * as Long from "long";
import { Observable } from "rxjs";
import { Address } from "../crypto/Address";
import { Credentials } from "../crypto/Credentials";
import { DCoreApi } from "../DCoreApi";
import { AccountRef } from "../DCoreSdk";
import { Account } from "../models/Account";
import { AssetAmount } from "../models/AssetAmount";
import { ChainObject } from "../models/ChainObject";
import { FullAccount } from "../models/FullAccount";
import { TransferOperation } from "../models/operation/TransferOperation";
import { SearchAccountsOrder } from "../models/order/SearchAccountsOrder";
import { TransactionConfirmation } from "../models/TransactionConfirmation";
import { BaseApi } from "./BaseApi";
export declare class AccountApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Check if the account exist.
     *
     * @param account account id or name
     *
     * @return account exists in DCore database
     */
    exist(account: AccountRef): Observable<boolean>;
    /**
     * Get account object by name.
     *
     * @param name the name of the account
     *
     * @return an account if found, {@link ObjectNotFoundError} otherwise
     */
    getByName(name: string): Observable<Account>;
    /**
     * Get account by name or id.
     *
     * @param account account name or account id
     *
     * @return an account if exist, {@link ObjectNotFoundError} if not found, or {@link IllegalArgumentError} if the account name or id is not valid
     */
    get(account: AccountRef): Observable<Account>;
    /**
     * Get the total number of accounts registered on the blockchain.
     */
    countAll(): Observable<Long>;
    /**
     * Get account object ids by public key addresses.
     *
     * @param keys formatted public keys of the account, eg. DCT5j2bMj7XVWLxUW7AXeMiYPambYFZfCcMroXDvbCfX1VoswcZG4
     *
     * @return a list of account object ids
     */
    findAllReferencesByKeys(keys: Address[]): Observable<ChainObject[][]>;
    /**
     * Get all accounts that refer to the account id in their owner or active authorities.
     *
     * @param accountId account object id
     *
     * @return a list of account object ids
     */
    findAllReferencesByAccount(accountId: ChainObject): Observable<ChainObject[]>;
    /**
     * Get account objects by ids.
     *
     * @param accountIds object ids of the account, 1.2.*
     *
     * @return an account list if found, {@link ObjectNotFoundError} otherwise
     */
    getAll(accountIds: ChainObject[]): Observable<Account[]>;
    /**
     * Fetch all objects relevant to the specified accounts and subscribe to updates.
     *
     * @param namesOrIds list of account names or ids
     * @param subscribe true to subscribe to updates
     *
     * @return map of names or ids to account, or empty map if not present
     */
    getFullAccounts(namesOrIds: string[], subscribe?: boolean): Observable<Map<string, FullAccount>>;
    /**
     * Get a list of accounts by name.
     *
     * @param names account names to retrieve
     *
     * @return list of accounts or {@link ObjectNotFoundError} if none exist
     */
    getAllByNames(names: string[]): Observable<Account[]>;
    /**
     * Get names and IDs for registered accounts.
     *
     * @param lowerBound lower bound of the first name to return
     * @param limit number of items to get, max 1000
     *
     * @return map of account names to corresponding IDs
     */
    listAllRelative(lowerBound: string, limit?: number): Observable<Map<string, ChainObject>>;
    /**
     * Get registered accounts that match search term.
     *
     * @param searchTerm will try to partially match account name or id
     * @param order sort data by field
     * @param id object id to start searching from
     * @param limit number of items to get, max 1000
     *
     * @return list of found accounts
     */
    findAll(searchTerm: string, order?: SearchAccountsOrder, id?: ChainObject, limit?: number): Observable<Account[]>;
    /**
     * Create API credentials.
     *
     * @param accountName account name
     * @param privateKey private key in wif base58 format, eg. 5Jd7zdvxXYNdUfnEXt5XokrE3zwJSs734yQ36a1YaqioRTGGLtn
     *
     * @return credentials
     */
    createCredentials(accountName: string, privateKey: string): Observable<Credentials>;
    /**
     * Create a transfer operation.
     *
     * @param credentials account credentials
     * @param account account id or account name
     * @param amount amount to send with asset type
     * @param memo optional message
     * @param encrypted encrypted is visible only for sender and receiver, unencrypted is visible publicly
     * @param fee {@link AssetAmount} fee for the operation, if left undefined the fee will be computed in DCT asset
     *
     * @return a transaction confirmation
     */
    createTransfer(credentials: Credentials, account: AccountRef, amount: AssetAmount, memo?: string, encrypted?: boolean, fee?: AssetAmount): Observable<TransferOperation>;
    /**
     * Make a transfer.
     *
     * @param credentials account credentials
     * @param account account id or account name
     * @param amount amount to send with asset type
     * @param memo optional message
     * @param encrypted encrypted is visible only for sender and receiver, unencrypted is visible publicly
     * @param fee {@link AssetAmount} fee for the operation, if left undefined the fee will be computed in DCT asset
     *
     * @return a transaction confirmation
     */
    transfer(credentials: Credentials, account: AccountRef, amount: AssetAmount, memo?: string, encrypted?: boolean, fee?: AssetAmount): Observable<TransactionConfirmation>;
}
