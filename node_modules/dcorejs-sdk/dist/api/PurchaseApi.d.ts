import { Observable } from "rxjs";
import { DCoreApi } from "../DCoreApi";
import { ChainObject } from "../models/ChainObject";
import { SearchPurchasesOrder } from "../models/order/SearchPurchasesOrder";
import { Purchase } from "../models/Purchase";
import { BaseApi } from "./BaseApi";
export declare class PurchaseApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Get a list of history purchases for consumer id.
     *
     * @param accountId consumer account object id, 1.2.*
     *
     * @return a list of history purchases
     */
    getAllHistory(accountId: ChainObject): Observable<Purchase[]>;
    /**
     * Get a list of open purchases.
     *
     * @return a list of open purchases
     */
    getAllOpen(): Observable<Purchase[]>;
    /**
     * Get a list of open purchases for content URI.
     *
     * @param uri content uri
     *
     * @return a list of open purchases
     */
    getAllOpenByUri(uri: string): Observable<Purchase[]>;
    /**
     * Get a list of open purchases for consumer id.
     *
     * @param accountId consumer account object id, 1.2.*
     *
     * @return a list of open purchases
     */
    getAllOpenByAccount(accountId: ChainObject): Observable<Purchase[]>;
    /**
     * Get consumer purchase by content uri.
     *
     * @param consumer object id of the account, 1.2.*
     * @param uri a uri of the content
     *
     * @return an account if found, {@link ObjectNotFoundError} otherwise
     */
    get(consumer: ChainObject, uri: string): Observable<Purchase>;
    /**
     * Search consumer open and history purchases.
     *
     * @param consumer object id of the account, 1.2.*
     * @param term search term
     * @param from object id of the history object to start from, use {@link ObjectType.Null.genericId} to ignore
     * @param order order defined by {@link SearchPurchasesOrder}
     * @param limit number of entries, max 100
     *
     * @return list of purchases
     */
    findAll(consumer: ChainObject, term: string, from?: ChainObject, order?: SearchPurchasesOrder, limit?: number): Observable<Purchase[]>;
    /**
     * Search for feedback.
     *
     * @param uri content URI
     * @param user feedback author account name
     * @param count maximum number of feedback objects to fetch
     * @param startId the id of purchase object to start searching from
     *
     * @return a list of purchase objects
     */
    findAllForFeedback(uri: string, user?: string, count?: number, startId?: ChainObject): Observable<Purchase[]>;
}
