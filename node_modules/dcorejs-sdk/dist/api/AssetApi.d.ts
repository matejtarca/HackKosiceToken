import { Decimal } from "decimal.js";
import * as Long from "long";
import { Observable } from "rxjs";
import { DCoreApi } from "../DCoreApi";
import { Asset } from "../models/Asset";
import { AssetAmount } from "../models/AssetAmount";
import { AssetData } from "../models/AssetData";
import { ChainObject } from "../models/ChainObject";
import { RealSupply } from "../models/RealSupply";
import { BaseApi } from "./BaseApi";
export declare class AssetApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Get asset by id.
     *
     * @param assetId asset id eg. DCT id is 1.3.0
     *
     * @return asset or {@link ObjectNotFoundError}
     */
    get(assetId: ChainObject): Observable<Asset>;
    /**
     * Get assets by id.
     *
     * @param assetIds asset id eg. DCT id is 1.3.0
     *
     * @return list of assets or {@link ObjectNotFoundError}
     */
    getAll(assetIds: ChainObject[]): Observable<Asset[]>;
    /**
     * Return current core asset supply.
     *
     * @return current supply
     */
    getRealSupply(): Observable<RealSupply>;
    /**
     * Get assets alphabetically by symbol name.
     *
     * @param lowerBound lower bound of symbol names to retrieve
     * @param limit maximum number of assets to fetch (must not exceed 100)
     *
     * @return the assets found
     */
    listAllRelative(lowerBound: string, limit?: number): Observable<Asset[]>;
    /**
     * Get asset by symbol
     *
     * @param assetSymbol asset symbol eg. DCT
     *
     * @return asset or {@link ObjectNotFoundError}
     */
    getByName(assetSymbol: string): Observable<Asset>;
    /**
     * Get assets by symbol
     *
     * @param assetSymbols asset symbols eg. DCT
     *
     * @return list of assets or {@link ObjectNotFoundError}
     */
    getAllByName(assetSymbols: string[]): Observable<Asset[]>;
    /**
     * Converts asset into DCT, using actual price feed.
     *
     * @param amount some amount
     *
     * @return price in DCT
     */
    convertToDct(amount: AssetAmount): Observable<AssetAmount>;
    /**
     * Get asset dynamic data by id.
     *
     * @param assetIds asset data id eg. DCT id is 2.3.0
     *
     * @return asset dynamic data or {@link ObjectNotFoundError}
     */
    getAssetsData(assetIds: ChainObject[]): Observable<AssetData[]>;
    /**
     * Get asset by id and convert amount in DCT to this asset
     *
     * @param assetId asset id to get
     * @param amount amount to convert
     * @param roundingMode rounding mode to use when rounding to target asset precision
     */
    convertFromDCT(assetId: ChainObject, amount: number | Long, roundingMode?: Decimal.Rounding): Observable<AssetAmount>;
    /**
     * Get asset by id and convert amount in this asset to DCT
     *
     * @param assetId asset id to get
     * @param amount amount to convert
     * @param roundingMode rounding mode to use when rounding to target asset precision
     */
    convertToDCT(assetId: ChainObject, amount: number | Long, roundingMode?: Decimal.Rounding): Observable<AssetAmount>;
}
