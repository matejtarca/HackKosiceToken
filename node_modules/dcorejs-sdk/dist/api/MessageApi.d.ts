import { Observable } from "rxjs";
import { Credentials } from "../crypto/Credentials";
import { DCoreApi } from "../DCoreApi";
import { ChainObject } from "../models/ChainObject";
import { Message } from "../models/Message";
import { MessageResponse } from "../models/MessageResponse";
import { SendMessageOperation } from "../models/operation/SendMessageOperation";
import { BaseApi } from "./BaseApi";
export declare class MessageApi extends BaseApi {
    constructor(api: DCoreApi);
    /**
     * Get all message operations
     *
     * @param sender filter by sender account id
     * @param receiver filter by receiver account id
     * @param maxCount max items to return
     *
     * @return list of message operation responses
     */
    getAllOperations(sender?: ChainObject, receiver?: ChainObject, maxCount?: number): Observable<MessageResponse[]>;
    /**
     * Get all messages
     *
     * @param sender filter by sender account id
     * @param receiver filter by receiver account id
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    getAll(sender?: ChainObject, receiver?: ChainObject, maxCount?: number): Observable<Message[]>;
    /**
     * Get all messages and decrypt
     *
     * @param credentials account credentials used for decryption, must be either sender's or receiver's
     * @param sender filter by sender account id
     * @param receiver filter by receiver account id
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    getAllDecrypted(credentials: Credentials, sender?: ChainObject, receiver?: ChainObject, maxCount?: number): Observable<Message[]>;
    /**
     * Get all messages for sender and decrypt
     *
     * @param credentials sender account credentials with decryption keys
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    getAllDecryptedForSender(credentials: Credentials, maxCount?: number): Observable<Message[]>;
    /**
     * Get all messages for receiver and decrypt
     *
     * @param credentials receiver account credentials with decryption keys
     * @param maxCount max items to return
     *
     * @return list of messages
     */
    getAllDecryptedForReceiver(credentials: Credentials, maxCount?: number): Observable<Message[]>;
    /**
     * Create message operation, send messages to multiple receivers
     *
     * @param credentials sender account credentials
     * @param messages a list of pairs of receiver account id and message
     *
     * @return send message operation
     */
    createMessageOperation(credentials: Credentials, messages: Array<[ChainObject, string]>): Observable<SendMessageOperation>;
    /**
     * Create message operation, send messages to multiple receivers, unencrypted
     *
     * @param credentials sender account credentials
     * @param messages a list of pairs of receiver account id and message
     *
     * @return send message operation
     */
    createMessageOperationUnencrypted(credentials: Credentials, messages: Array<[ChainObject, string]>): SendMessageOperation;
}
