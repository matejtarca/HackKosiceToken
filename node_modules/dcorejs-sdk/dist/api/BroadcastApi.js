"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var ECKeyPair_1 = require("../crypto/ECKeyPair");
var BroadcastTransaction_1 = require("../net/models/request/BroadcastTransaction");
var BroadcastTransactionWithCallback_1 = require("../net/models/request/BroadcastTransactionWithCallback");
var BaseApi_1 = require("./BaseApi");
var BroadcastApi = /** @class */ (function (_super) {
    __extends(BroadcastApi, _super);
    function BroadcastApi(api) {
        return _super.call(this, api) || this;
    }
    BroadcastApi.getPrivate = function (privateKey) {
        return typeof privateKey === "string" ? ECKeyPair_1.ECKeyPair.parseWif(privateKey) : privateKey;
    };
    /**
     * broadcast transaction to DCore
     * @param transaction transaction to broadcast
     */
    BroadcastApi.prototype.broadcastTrx = function (transaction) {
        return this.request(new BroadcastTransaction_1.BroadcastTransaction(transaction));
    };
    /**
     * Broadcast operation to DCore
     *
     * @param privateKey EC key pair or Base58 encoded private key
     * @param operations operations to be submitted to DCore
     * @param expiration transaction expiration in seconds, after the expiry the transaction is removed from recent pool and will be dismissed if not included in DCore block
     */
    BroadcastApi.prototype.broadcast = function (privateKey, operations, expiration) {
        var _this = this;
        if (expiration === void 0) { expiration = this.api.transactionExpiration; }
        return this.api.transactionApi.createTransaction(operations, expiration).pipe(operators_1.map(function (trx) { return trx.withSignature(BroadcastApi.getPrivate(privateKey)); }), operators_1.flatMap(function (trx) { return _this.broadcastTrx(trx); }));
    };
    /**
     * Broadcast transaction to DCore with callback
     * @param transaction transaction to broadcast
     *
     * @return a transaction confirmation
     */
    BroadcastApi.prototype.broadcastTrxWithCallback = function (transaction) {
        return this.request(new BroadcastTransactionWithCallback_1.BroadcastTransactionWithCallback(transaction)).pipe(operators_1.first());
    };
    /**
     * Broadcast operation to DCore
     *
     * @param privateKey EC key pair or Base58 encoded private key
     * @param operations operations to be submitted to DCore
     * @param expiration transaction expiration in seconds, after the expiry the transaction is removed from recent pool and will be dismissed if not included in DCore block
     *
     * @return a transaction confirmation
     */
    BroadcastApi.prototype.broadcastWithCallback = function (privateKey, operations, expiration) {
        var _this = this;
        if (expiration === void 0) { expiration = this.api.transactionExpiration; }
        return this.api.transactionApi.createTransaction(operations, expiration).pipe(operators_1.map(function (trx) { return trx.withSignature(BroadcastApi.getPrivate(privateKey)); }), operators_1.flatMap(function (trx) { return _this.broadcastTrxWithCallback(trx); }));
    };
    return BroadcastApi;
}(BaseApi_1.BaseApi));
exports.BroadcastApi = BroadcastApi;
//# sourceMappingURL=BroadcastApi.js.map