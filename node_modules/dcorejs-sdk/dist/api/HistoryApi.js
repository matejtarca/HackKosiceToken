"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Long = require("long");
var ObjectType_1 = require("../models/ObjectType");
var GetAccountBalanceForTransaction_1 = require("../net/models/request/GetAccountBalanceForTransaction");
var GetAccountHistory_1 = require("../net/models/request/GetAccountHistory");
var GetRelativeAccountHistory_1 = require("../net/models/request/GetRelativeAccountHistory");
var SearchAccountBalanceHistory_1 = require("../net/models/request/SearchAccountBalanceHistory");
var BaseApi_1 = require("./BaseApi");
var HistoryApi = /** @class */ (function (_super) {
    __extends(HistoryApi, _super);
    function HistoryApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Returns balance operation on the account and operation id.
     *
     * @param accountId object id of the account whose history should be queried, 1.2.*
     * @param operationId object id of the history object, 1.7.*
     *
     * @return an balance operation change
     */
    HistoryApi.prototype.getOperation = function (accountId, operationId) {
        return this.request(new GetAccountBalanceForTransaction_1.GetAccountBalanceForTransaction(accountId, operationId));
    };
    /**
     * Get account history of operations.
     *
     * @param accountId object id of the account whose history should be queried, 1.2.*
     * @param startId id of the history object to start from, use {@link ObjectType.OperationHistory.genericId} to ignore
     * @param stopId id of the history object to stop at, use {@link ObjectType.OperationHistory.genericId} to ignore
     * @param limit number of entries, max 100
     *
     * @return a list of operations performed by account, ordered from most recent to oldest
     */
    HistoryApi.prototype.listOperations = function (accountId, startId, stopId, limit) {
        if (startId === void 0) { startId = ObjectType_1.ObjectType.OperationHistory.genericId(); }
        if (stopId === void 0) { stopId = ObjectType_1.ObjectType.OperationHistory.genericId(); }
        if (limit === void 0) { limit = 100; }
        return this.request(new GetAccountHistory_1.GetAccountHistory(accountId, stopId, limit, startId));
    };
    /**
     * Get account history of operations.
     *
     * @param accountId object id of the account whose history should be queried, 1.2.*
     * @param start sequence number of the most recent operation to retrieve. 0 is default, which will start querying from the most recent operation
     * @param limit  maximum number of operations to retrieve (must not exceed 100)
     *
     * @return a list of operations performed by account, ordered from most recent to oldest
     */
    HistoryApi.prototype.listOperationsRelative = function (accountId, start, limit) {
        if (start === void 0) { start = 0; }
        if (limit === void 0) { limit = 100; }
        return this.request(new GetRelativeAccountHistory_1.GetRelativeAccountHistory(accountId, 0, limit, start));
    };
    /**
     * Returns the most recent balance operations on the named account.
     * This returns a list of operation history objects, which describe activity on the account.
     *
     * @param accountId object id of the account whose history should be queried, 1.2.*
     * @param assets list of asset object ids to filter or empty for all assets
     * @param recipientAccount partner account object id to filter transfers to specific account, 1.2.* or null
     * @param fromBlock filtering parameter, starting block number (can be determined from time) or zero when not used
     * @param toBlock filtering parameter, ending block number or zero when not used
     * @param startOffset  starting offset from zero
     * @param limit the number of entries to return (starting from the most recent), max 100
     *
     * @return a list of balance changes
     */
    HistoryApi.prototype.findAllOperations = function (accountId, assets, recipientAccount, fromBlock, toBlock, startOffset, limit) {
        if (assets === void 0) { assets = []; }
        if (fromBlock === void 0) { fromBlock = Long.ZERO; }
        if (toBlock === void 0) { toBlock = Long.ZERO; }
        if (startOffset === void 0) { startOffset = Long.ZERO; }
        if (limit === void 0) { limit = 100; }
        return this.request(new SearchAccountBalanceHistory_1.SearchAccountBalanceHistory(accountId, assets, recipientAccount, fromBlock, toBlock, startOffset, limit));
    };
    return HistoryApi;
}(BaseApi_1.BaseApi));
exports.HistoryApi = HistoryApi;
//# sourceMappingURL=HistoryApi.js.map