"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GetSubscription_1 = require("../net/models/request/GetSubscription");
var ListActiveSubscriptionsByAuthor_1 = require("../net/models/request/ListActiveSubscriptionsByAuthor");
var ListActiveSubscriptionsByConsumer_1 = require("../net/models/request/ListActiveSubscriptionsByConsumer");
var ListSubscriptionsByAuthor_1 = require("../net/models/request/ListSubscriptionsByAuthor");
var ListSubscriptionsByConsumer_1 = require("../net/models/request/ListSubscriptionsByConsumer");
var BaseApi_1 = require("./BaseApi");
var SubscriptionApi = /** @class */ (function (_super) {
    __extends(SubscriptionApi, _super);
    function SubscriptionApi(api) {
        return _super.call(this, api) || this;
    }
    /**
     * Get a subscription object by ID.
     *
     * @param id subscription object id, 2.15.*
     *
     * @return the subscription object corresponding to the provided ID, [ObjectNotFoundException] otherwise
     */
    // todo subscriptions: wait for subscribe operation to test
    SubscriptionApi.prototype.get = function (id) {
        return this.request(new GetSubscription_1.GetSubscription((id)));
    };
    /**
     * Get a list of active (not expired) subscriptions by account (consumer).
     *
     * @param consumer consumer account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of active subscription objects
     */
    SubscriptionApi.prototype.getAllActiveByConsumer = function (consumer, count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListActiveSubscriptionsByConsumer_1.ListActiveSubscriptionsByConsumer(consumer, count));
    };
    /**
     * Get a list of active (not expired) subscriptions by account (author).
     *
     * @param author author account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of active subscription objects
     */
    SubscriptionApi.prototype.getAllActiveByAuthor = function (author, count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListActiveSubscriptionsByAuthor_1.ListActiveSubscriptionsByAuthor(author, count));
    };
    /**
     * Get a list of subscriptions by account (consumer).
     *
     * @param consumer consumer account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of subscription objects
     */
    SubscriptionApi.prototype.getAllByConsumer = function (consumer, count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListSubscriptionsByConsumer_1.ListSubscriptionsByConsumer(consumer, count));
    };
    /**
     * Get a list of subscriptions by account (author).
     *
     * @param author author account object id, 1.2.*
     * @param count maximum number of subscription objects to fetch (must not exceed 100)
     *
     * @return a list of subscription objects
     */
    SubscriptionApi.prototype.getAllByAuthor = function (author, count) {
        if (count === void 0) { count = 100; }
        return this.request(new ListSubscriptionsByAuthor_1.ListSubscriptionsByAuthor(author, count));
    };
    return SubscriptionApi;
}(BaseApi_1.BaseApi));
exports.SubscriptionApi = SubscriptionApi;
//# sourceMappingURL=SubscriptionApi.js.map