"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GetProposedTransactions_1 = require("../net/models/request/GetProposedTransactions");
var GetRecentTransactionById_1 = require("../net/models/request/GetRecentTransactionById");
var GetTransaction_1 = require("../net/models/request/GetTransaction");
var GetTransactionById_1 = require("../net/models/request/GetTransactionById");
var GetTransactionHex_1 = require("../net/models/request/GetTransactionHex");
var BaseApi_1 = require("./BaseApi");
var TransactionApi = /** @class */ (function (_super) {
    __extends(TransactionApi, _super);
    function TransactionApi(api, core) {
        var _this = _super.call(this, api) || this;
        _this.core = core;
        return _this;
    }
    /**
     * Create unsigned transaction
     *
     * @param operations operations to include in transaction
     * @param expiration transaction expiration in seconds, after the expiry the transaction is removed from recent pool
     * and will be dismissed if not included in DCore block
     */
    TransactionApi.prototype.createTransaction = function (operations, expiration) {
        if (expiration === void 0) { expiration = this.api.transactionExpiration; }
        return this.core.prepareTransaction(operations, expiration);
    };
    /**
     * Get the set of proposed transactions relevant to the specified account id.
     *
     * @param accountId account object id, 1.2.*
     *
     * @return a set of proposed transactions
     */
    // todo model
    TransactionApi.prototype.getAllProposed = function (accountId) {
        return this.request(new GetProposedTransactions_1.GetProposedTransactions(accountId));
    };
    /**
     * If the transaction has not expired, this method will return the transaction for the given ID or it will return {@link ObjectNotFoundError}
     * Just because it is not known does not mean it wasn't included in the DCore.
     * The ID can be retrieved from [Transaction] or [TransactionConfirmation] objects.
     *
     * @param trxId transaction id
     *
     * @return a transaction if found, {@link ObjectNotFoundError} otherwise
     */
    TransactionApi.prototype.getRecent = function (trxId) {
        return this.request(new GetRecentTransactionById_1.GetRecentTransactionById(trxId));
    };
    /**
     * This method will return the transaction for the given ID or it will return [ch.decent.sdk.exception.ObjectNotFoundException].
     * The ID can be retrieved from [Transaction] or [TransactionConfirmation] objects.
     *
     * Note: By default these objects are not tracked, the transaction_history_plugin must be loaded for these objects to be maintained.
     * Just because it is not known does not mean it wasn't included in the DCore.
     *
     * @param trxId transaction id
     *
     * @return a transaction if found, {@link ObjectNotFoundError} otherwise
     */
    TransactionApi.prototype.getById = function (trxId) {
        return this.request(new GetTransactionById_1.GetTransactionById(trxId));
    };
    /**
     * get applied transaction
     *
     * @param blockNum block number
     * @param trxInBlock position of the transaction in block
     *
     * @return a transaction if found, {@link ObjectNotFoundError} otherwise
     */
    TransactionApi.prototype.get = function (blockNum, trxInBlock) {
        return this.request(new GetTransaction_1.GetTransaction(blockNum, trxInBlock));
    };
    /**
     * get applied transaction
     *
     * @param confirmation confirmation returned from transaction broadcast
     *
     * @return a transaction if found, {@link ObjectNotFoundError} otherwise
     */
    TransactionApi.prototype.getByConfirmation = function (confirmation) {
        return this.get(confirmation.blockNum, confirmation.trxNum);
    };
    /**
     * Get a hexdump of the serialized binary form of a transaction.
     *
     * @param transaction a signed transaction
     *
     * @return hexadecimal string
     */
    TransactionApi.prototype.getHexDump = function (transaction) {
        return this.request(new GetTransactionHex_1.GetTransactionHex(transaction));
    };
    return TransactionApi;
}(BaseApi_1.BaseApi));
exports.TransactionApi = TransactionApi;
//# sourceMappingURL=TransactionApi.js.map