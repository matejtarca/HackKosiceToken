"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var decimal_js_1 = require("decimal.js");
var _ = require("lodash");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs-spy/operators");
var scalar_1 = require("rxjs/internal/observable/scalar");
var operators_2 = require("rxjs/operators");
var DCoreApi_1 = require("./DCoreApi");
var BlockData_1 = require("./models/BlockData");
var IllegalArgumentError_1 = require("./models/error/IllegalArgumentError");
var Transaction_1 = require("./models/Transaction");
var GetChainId_1 = require("./net/models/request/GetChainId");
var GetDynamicGlobalProps_1 = require("./net/models/request/GetDynamicGlobalProps");
var GetRequiredFees_1 = require("./net/models/request/GetRequiredFees");
var RpcService_1 = require("./net/rpc/RpcService");
var RxWebSocket_1 = require("./net/ws/RxWebSocket");
var ObjectCheckOf_1 = require("./utils/ObjectCheckOf");
var Utils_1 = require("./utils/Utils");
decimal_js_1.default.set({
    // max amount have precision 16 (satoshi significant places) and we are doubling that for partial result from multiply/division operations
    precision: 32,
});
var DCoreSdk = /** @class */ (function () {
    function DCoreSdk(rpc, ws) {
        this.rpc = rpc;
        this.ws = ws;
        Utils_1.assertThrow(rpc != null || ws != null, function () { return "rpc or webSocket must be set"; });
    }
    DCoreSdk.createForHttp = function (options) {
        return new DCoreApi_1.DCoreApi(new DCoreSdk(new RpcService_1.RpcService(options)));
    };
    DCoreSdk.createForWebSocket = function (factory) {
        return new DCoreApi_1.DCoreApi(new DCoreSdk(undefined, new RxWebSocket_1.RxWebSocket(factory)));
    };
    DCoreSdk.create = function (options, factory) {
        return new DCoreApi_1.DCoreApi(new DCoreSdk(new RpcService_1.RpcService(options), new RxWebSocket_1.RxWebSocket(factory)));
    };
    DCoreSdk.prototype.requestStream = function (request) {
        if (this.ws) {
            return this.ws.requestStream(request).pipe(operators_1.tag("API_request_callback_" + request.method));
        }
        else {
            return rxjs_1.throwError(new IllegalArgumentError_1.IllegalArgumentError("callbacks not available through HTTP API"));
        }
    };
    DCoreSdk.prototype.request = function (request) {
        var result;
        Utils_1.assertThrow(_.isNil(this.ws) || _.isNil(this.rpc), function () { return "either ws or rpc must be present"; });
        if (this.ws && (_.isNil(this.rpc) || this.ws.isConnected() || ObjectCheckOf_1.ObjectCheckOf(request, "callbackId"))) {
            result = this.ws.request(request);
        }
        else {
            if (_.isNil(this.rpc)) {
                return rxjs_1.throwError(new IllegalArgumentError_1.IllegalArgumentError("callbacks not available through HTTP API"));
            }
            result = this.rpc.request(request);
        }
        return result.pipe(operators_1.tag("API_request_" + request.method));
    };
    Object.defineProperty(DCoreSdk.prototype, "timeout", {
        set: function (millis) {
            if (this.ws) {
                this.ws.timeout = millis;
            }
        },
        enumerable: true,
        configurable: true
    });
    DCoreSdk.prototype.disconnect = function () {
        if (this.ws) {
            this.ws.disconnect();
        }
    };
    DCoreSdk.prototype.prepareTransaction = function (operations, transactionExpiration) {
        var _this = this;
        var _a = operations.reduce(function (res, el) {
            res[_.isNil(el.fee) ? 0 : 1].push(el);
            return res;
        }, [[], []]), withoutFees = _a[0], withFees = _a[1];
        var finalOps;
        if (withoutFees.length > 0) {
            finalOps = this.request(new GetRequiredFees_1.GetRequiredFees(operations)).pipe(operators_2.map(function (fees) { return withoutFees.map(function (op, idx) {
                op.fee = fees[idx];
                return op;
            }); }), operators_2.map(function (ops) { return ops.concat(withFees); }));
        }
        else {
            finalOps = scalar_1.scalar(withFees);
        }
        var chainId;
        if (_.isNil(this.chainId)) {
            chainId = this.request(new GetChainId_1.GetChainId()).pipe(operators_2.tap(function (id) { return _this.chainId = id; }));
        }
        else {
            chainId = scalar_1.scalar(this.chainId);
        }
        return chainId.pipe(operators_2.flatMap(function (id) {
            return rxjs_1.zip(finalOps, _this.request(new GetDynamicGlobalProps_1.GetDynamicGlobalProps())).pipe(operators_2.map(function (_a) {
                var ops = _a[0], props = _a[1];
                return new Transaction_1.Transaction(new BlockData_1.BlockData(props, transactionExpiration), ops, id);
            }));
        }));
    };
    return DCoreSdk;
}());
exports.DCoreSdk = DCoreSdk;
//# sourceMappingURL=DCoreSdk.js.map