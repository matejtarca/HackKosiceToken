"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ByteBuffer = require("bytebuffer");
var _ = require("lodash");
var Long = require("long");
var util_1 = require("util");
var Address_1 = require("../../crypto/Address");
var AssetAmount_1 = require("../../models/AssetAmount");
var Authority_1 = require("../../models/Authority");
var AuthorityMap_1 = require("../../models/AuthorityMap");
var BlockData_1 = require("../../models/BlockData");
var ChainObject_1 = require("../../models/ChainObject");
var CustodyData_1 = require("../../models/CustodyData");
var KeyPart_1 = require("../../models/KeyPart");
var Memo_1 = require("../../models/Memo");
var AccountCreateOperation_1 = require("../../models/operation/AccountCreateOperation");
var AccountUpdateOperation_1 = require("../../models/operation/AccountUpdateOperation");
var AddOrUpdateContentOperation_1 = require("../../models/operation/AddOrUpdateContentOperation");
var PurchaseContentOperation_1 = require("../../models/operation/PurchaseContentOperation");
var RemoveContentOperation_1 = require("../../models/operation/RemoveContentOperation");
var TransferOperation_1 = require("../../models/operation/TransferOperation");
var Options_1 = require("../../models/Options");
var PubKey_1 = require("../../models/PubKey");
var Publishing_1 = require("../../models/Publishing");
var RegionalPrice_1 = require("../../models/RegionalPrice");
var Transaction_1 = require("../../models/Transaction");
var VoteId_1 = require("../../models/VoteId");
var Serializer = /** @class */ (function () {
    function Serializer() {
        var _this = this;
        this.adapters = new Map();
        // @ts-ignore fails on instance of Long, force a string
        this.chainIdAdapter = function (buffer, obj) { return buffer.writeVarint64(obj.instance.toString()); };
        this.stringAdapter = function (buffer, obj) {
            var encodedString = new util_1.TextEncoder().encode(obj);
            buffer.writeVarint32(encodedString.length);
            buffer.append(encodedString);
        };
        this.addressAdapter = function (buffer, obj) { return buffer.append(obj.publicKey); };
        this.authorityAdapter = function (buffer, obj) {
            buffer.writeUint32(obj.weightThreshold);
            _this.append(buffer, obj.accountAuths);
            _this.append(buffer, obj.keyAuths);
        };
        this.authorityMapAdapter = function (buffer, obj) {
            _this.append(buffer, obj.value);
            buffer.writeUint16(obj.weight);
        };
        this.longAdapter = function (buffer, obj) {
            // @ts-ignore fails on instance of Long, force a string
            buffer.writeUint64(obj.toString());
        };
        this.assetAmountAdapter = function (buffer, obj) {
            _this.append(buffer, obj.amount);
            _this.append(buffer, obj.assetId);
        };
        this.bufferAdapter = function (buffer, obj) {
            buffer.writeVarint32(obj.length);
            buffer.append(obj);
        };
        this.memoAdapter = function (buffer, obj) {
            if (_.isNil(obj.from)) {
                buffer.append(Buffer.alloc(33, 0));
            }
            else {
                _this.append(buffer, obj.from);
            }
            if (_.isNil(obj.to)) {
                buffer.append(Buffer.alloc(33, 0));
            }
            else {
                _this.append(buffer, obj.to);
            }
            _this.append(buffer, obj.nonce);
            _this.append(buffer, Buffer.from(obj.message, "hex"));
        };
        // tslint:disable-next-line:no-bitwise
        this.voteAdapter = function (buffer, obj) { return buffer.writeUint32(obj.id << 8 | obj.type); };
        this.booleanAdapter = function (buffer, obj) { return buffer.writeByte(obj ? 1 : 0); };
        this.optionsAdapter = function (buffer, obj) {
            _this.append(buffer, obj.memoKey);
            _this.append(buffer, obj.votingAccount);
            buffer.writeUint16(obj.numMiner);
            _this.append(buffer, obj.votes);
            _this.append(buffer, obj.extensions);
            _this.append(buffer, obj.allowSubscription);
            _this.append(buffer, obj.pricePerSubscribe);
            buffer.writeUint32(obj.subscriptionPeriod);
        };
        this.pubKeyAdapter = function (buffer, obj) { return _this.append(buffer, obj.key); };
        this.publishingAdapter = function (buffer, obj) {
            _this.append(buffer, obj.isPublishingManager);
            _this.append(buffer, obj.publishRightsReceived);
            _this.append(buffer, obj.publishRightsForwarded);
        };
        this.momentAdapter = function (buffer, obj) {
            buffer.writeUint32(obj.unix());
        };
        this.blockDataAdapter = function (buffer, obj) {
            buffer.writeUint16(obj.refBlockNum);
            buffer.writeUint32(obj.refBlockPrefix.getLowBitsUnsigned());
            _this.momentAdapter(buffer, obj.expiration);
        };
        this.transactionAdapter = function (buffer, obj) {
            _this.append(buffer, obj.blockData);
            _this.append(buffer, obj.operations);
            _this.append(buffer, obj.extensions);
        };
        this.accountCreateOperationAdapter = function (buffer, obj) {
            buffer.writeByte(obj.type);
            _this.append(buffer, obj.fee);
            _this.append(buffer, obj.registrar);
            _this.append(buffer, obj.name);
            _this.append(buffer, obj.owner);
            _this.append(buffer, obj.active);
            _this.append(buffer, obj.options);
            _this.append(buffer, obj.extensions);
        };
        this.accountUpdateOperationAdapter = function (buffer, obj) {
            buffer.writeByte(obj.type);
            _this.append(buffer, obj.fee);
            _this.append(buffer, obj.accountId);
            _this.appendOptional(buffer, obj.owner);
            _this.appendOptional(buffer, obj.active);
            _this.appendOptional(buffer, obj.options);
            _this.append(buffer, obj.extensions);
        };
        this.buyContentOperationAdapter = function (buffer, obj) {
            buffer.writeByte(obj.type);
            _this.append(buffer, obj.fee);
            _this.append(buffer, obj.uri);
            _this.append(buffer, obj.consumer);
            _this.append(buffer, obj.price);
            buffer.writeUint32(obj.regionCode);
            _this.append(buffer, obj.publicElGamal);
        };
        this.transferOperationAdapter = function (buffer, obj) {
            buffer.writeByte(obj.type);
            _this.append(buffer, obj.fee);
            _this.append(buffer, obj.from);
            buffer.append(obj.to.fullBytes);
            _this.append(buffer, obj.amount);
            _this.appendOptional(buffer, obj.memo);
            _this.append(buffer, obj.extensions);
        };
        this.coAuthorsAdapter = function (buffer, obj) {
            buffer.writeVarint64(obj.length);
            obj.forEach(function (_a) {
                var id = _a[0], weight = _a[1];
                _this.append(buffer, id);
                buffer.writeUint32(weight);
            });
        };
        this.regionalPriceAdapter = function (buffer, obj) {
            buffer.writeUint32(obj.region);
            _this.append(buffer, obj.price);
        };
        this.keyPartAdapter = function (buffer, obj) {
            _this.append(buffer, obj.keyC1);
            _this.append(buffer, obj.keyD1);
        };
        this.custodyDataAdapter = function (buffer, obj) {
            buffer.writeUint32(obj.n);
            _this.stringAdapter(buffer, obj.seed);
            _this.stringAdapter(buffer, obj.pubKey);
        };
        this.addOrUpdateContentOperationAdapter = function (buffer, obj) {
            buffer.writeByte(obj.type);
            _this.append(buffer, obj.fee);
            _this.append(buffer, obj.size);
            _this.append(buffer, obj.author);
            _this.coAuthorsAdapter(buffer, obj.coAuthors);
            _this.append(buffer, obj.uri);
            buffer.writeUint32(obj.quorum);
            _this.append(buffer, obj.price);
            buffer.append(Buffer.from(obj.hash, "hex"));
            _this.append(buffer, obj.seeders);
            _this.append(buffer, obj.keyParts);
            _this.momentAdapter(buffer, obj.expiration);
            _this.append(buffer, obj.publishingFee);
            _this.stringAdapter(buffer, obj.synopsis);
            _this.appendOptional(buffer, obj.custodyData);
        };
        this.removeContentOperationAdapter = function (buffer, obj) {
            buffer.writeByte(obj.type);
            _this.append(buffer, obj.fee);
            _this.append(buffer, obj.author);
            _this.append(buffer, obj.uri);
        };
        this.adapters.set(ChainObject_1.ChainObject.name, this.chainIdAdapter);
        this.adapters.set("string", this.stringAdapter);
        this.adapters.set(Address_1.Address.name, this.addressAdapter);
        this.adapters.set(Authority_1.Authority.name, this.authorityAdapter);
        this.adapters.set(AuthorityMap_1.AuthorityMap.name, this.authorityMapAdapter);
        this.adapters.set(Long.name, this.longAdapter);
        this.adapters.set(AssetAmount_1.AssetAmount.name, this.assetAmountAdapter);
        this.adapters.set(Buffer.name, this.bufferAdapter);
        this.adapters.set(Memo_1.Memo.name, this.memoAdapter);
        this.adapters.set(VoteId_1.VoteId.name, this.voteAdapter);
        this.adapters.set("boolean", this.booleanAdapter);
        this.adapters.set(Options_1.Options.name, this.optionsAdapter);
        this.adapters.set(PubKey_1.PubKey.name, this.pubKeyAdapter);
        this.adapters.set(Publishing_1.Publishing.name, this.publishingAdapter);
        this.adapters.set(BlockData_1.BlockData.name, this.blockDataAdapter);
        this.adapters.set(Transaction_1.Transaction.name, this.transactionAdapter);
        this.adapters.set(AccountCreateOperation_1.AccountCreateOperation.name, this.accountCreateOperationAdapter);
        this.adapters.set(AccountUpdateOperation_1.AccountUpdateOperation.name, this.accountUpdateOperationAdapter);
        this.adapters.set(PurchaseContentOperation_1.PurchaseContentOperation.name, this.buyContentOperationAdapter);
        this.adapters.set(TransferOperation_1.TransferOperation.name, this.transferOperationAdapter);
        this.adapters.set(RegionalPrice_1.RegionalPrice.name, this.regionalPriceAdapter);
        this.adapters.set(KeyPart_1.KeyPart.name, this.keyPartAdapter);
        this.adapters.set(CustodyData_1.CustodyData.name, this.custodyDataAdapter);
        this.adapters.set(AddOrUpdateContentOperation_1.AddOrUpdateContentOperation.name, this.addOrUpdateContentOperationAdapter);
        this.adapters.set(RemoveContentOperation_1.RemoveContentOperation.name, this.removeContentOperationAdapter);
    }
    Serializer.prototype.serialize = function (obj) {
        var buffer = new ByteBuffer(1024, true);
        this.append(buffer, obj);
        return Buffer.from(buffer.compact(0, buffer.offset).reset().buffer);
    };
    Serializer.prototype.appendOptional = function (buffer, obj) {
        if (_.isNil(obj)) {
            buffer.writeByte(0);
        }
        else {
            buffer.writeByte(1);
            this.append(buffer, obj);
        }
    };
    Serializer.prototype.append = function (buffer, obj) {
        var _this = this;
        if (_.isArray(obj) && obj.length === 0) {
            buffer.writeByte(0);
        }
        else if (_.isArray(obj)) {
            buffer.writeVarint64(obj.length);
            obj.forEach(function (value) { return _this.append(buffer, value); });
        }
        else {
            var key = _.isObject(obj) ? obj.constructor.name : typeof obj;
            var adapter = this.adapters.get(key);
            _.isNil(adapter) ? TypeError("no adapter for " + key) : adapter(buffer, obj);
        }
    };
    return Serializer;
}());
exports.Serializer = Serializer;
//# sourceMappingURL=Serializer.js.map