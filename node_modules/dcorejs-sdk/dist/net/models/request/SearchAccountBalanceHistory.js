"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var class_transformer_1 = require("class-transformer");
var Long = require("long");
var BalanceChange_1 = require("../../../models/BalanceChange");
var ObjectType_1 = require("../../../models/ObjectType");
var Utils_1 = require("../../../utils/Utils");
var ApiGroup_1 = require("../ApiGroup");
var BaseRequest_1 = require("./BaseRequest");
var SearchAccountBalanceHistory = /** @class */ (function (_super) {
    __extends(SearchAccountBalanceHistory, _super);
    function SearchAccountBalanceHistory(accountId, assets, recipientAccount, fromBlock, toBlock, startOffset, limit) {
        if (assets === void 0) { assets = []; }
        if (fromBlock === void 0) { fromBlock = Long.ZERO; }
        if (toBlock === void 0) { toBlock = Long.ZERO; }
        if (startOffset === void 0) { startOffset = Long.ZERO; }
        if (limit === void 0) { limit = 100; }
        var _this = _super.call(this, ApiGroup_1.ApiGroup.History, "search_account_balance_history", [
            accountId.objectId,
            assets.map(function (id) { return id.objectId; }),
            recipientAccount && recipientAccount.objectId,
            fromBlock.toString(),
            toBlock.toString(),
            startOffset.toString(),
            limit,
        ], function (value) { return class_transformer_1.plainToClass(BalanceChange_1.BalanceChange, value); }) || this;
        Utils_1.assertThrow(accountId.objectType === ObjectType_1.ObjectType.Account, function () { return "not a valid account object id"; });
        Utils_1.assertThrow(assets.every(function (id) { return id.objectType === ObjectType_1.ObjectType.Asset; }), function () { return "not a valid asset object id"; });
        Utils_1.assertThrow(recipientAccount ? recipientAccount.objectType === ObjectType_1.ObjectType.Account : true, function () { return "not a valid account object id"; });
        return _this;
    }
    return SearchAccountBalanceHistory;
}(BaseRequest_1.BaseRequest));
exports.SearchAccountBalanceHistory = SearchAccountBalanceHistory;
//# sourceMappingURL=SearchAccountBalanceHistory.js.map