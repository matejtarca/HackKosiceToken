"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs-spy/operators");
var AsyncSubject_1 = require("rxjs/internal/AsyncSubject");
var defer_1 = require("rxjs/internal/observable/defer");
var merge_1 = require("rxjs/internal/observable/merge");
var scalar_1 = require("rxjs/internal/observable/scalar");
var operators_2 = require("rxjs/operators");
var DCoreError_1 = require("../../models/error/DCoreError");
var ObjectNotFoundError_1 = require("../../models/error/ObjectNotFoundError");
var ObjectCheckOf_1 = require("../../utils/ObjectCheckOf");
var WebSocketClosedError_1 = require("../models/WebSocketClosedError");
var RxWebSocket = /** @class */ (function () {
    function RxWebSocket(webSocketFactory) {
        var _this = this;
        this.webSocketFactory = webSocketFactory;
        this.timeout = 60 * 1000;
        this.callId = 0;
        this.messages = new rxjs_1.Subject();
        this.events = rxjs_1.Observable.create(function (emitter) {
            var socket = _this.webSocketFactory();
            socket.onopen = function () {
                _this.webSocketAsync.next(socket);
                _this.webSocketAsync.complete();
            };
            socket.onclose = function (event) {
                if (event.wasClean) {
                    emitter.complete();
                }
                else {
                    emitter.error(new Error(event.reason));
                }
            };
            socket.onmessage = function (message) { return emitter.next(message.data); };
            socket.onerror = function (error) { return emitter.error(Error(error.message)); };
        }).pipe(operators_1.tag("RxWebSocket_events"));
    }
    RxWebSocket.checkError = function (value, callId) {
        if (ObjectCheckOf_1.ObjectCheckOf(value, "id") && value.id === callId && !_.isNil(value.error)) {
            throw new DCoreError_1.DCoreError(value.error);
        }
    };
    RxWebSocket.getIdAndResult = function (value) {
        if (ObjectCheckOf_1.ObjectCheckOf(value, "id")) {
            return [value.id, value.result];
        }
        if (ObjectCheckOf_1.ObjectCheckOf(value, "method")) {
            return [value.params[0], value.params[1][0]];
        }
        throw Error("not supported response: " + value);
    };
    RxWebSocket.checkEmpty = function (value, request) {
        if (_.isNil(value) || (_.isArray(value) && value.filter(Boolean).length === 0)) {
            throw new ObjectNotFoundError_1.ObjectNotFoundError(request.description());
        }
    };
    RxWebSocket.send = function (ws, request) {
        // todo logging https://decentplatform.atlassian.net/browse/DSDK-587
        // tslint:disable-next-line
        console.log(request);
        ws.send(request);
    };
    RxWebSocket.prototype.isConnected = function () {
        return !_.isUndefined(this.subscriptions) && !this.subscriptions.closed;
    };
    RxWebSocket.prototype.request = function (request) {
        return this.make(request, this.getCallId());
    };
    RxWebSocket.prototype.requestStream = function (request) {
        return this.makeStream(request, this.getCallId(), this.getCallId());
    };
    RxWebSocket.prototype.getCallId = function () {
        return this.callId++;
    };
    RxWebSocket.prototype.disconnect = function () {
        this.webSocket().subscribe(function (socket) {
            socket.close(1000, "closing");
            socket.onclose({ wasClean: true, code: 1000, reason: "self disconnect", target: socket });
            socket.onclose = undefined;
        });
    };
    RxWebSocket.prototype.webSocket = function () {
        if (_.isNil(this.webSocketAsync)) {
            this.webSocketAsync = new AsyncSubject_1.AsyncSubject();
            this.connect();
        }
        return this.webSocketAsync;
    };
    RxWebSocket.prototype.connect = function () {
        var _this = this;
        this.subscriptions =
            this.events.pipe(operators_2.tap({
                complete: function () { return _this.messages.next(new WebSocketClosedError_1.WebSocketClosedError()); },
                error: function (err) { return _this.messages.next(err); },
            }), operators_2.filter(function (value) { return typeof value === "string"; }), operators_2.map(function (value) { return JSON.parse(value); }), operators_2.tap(function (value) { return _this.messages.next(value); })).subscribe({
                complete: function () {
                    _this.subscriptions.unsubscribe();
                    _this.webSocketAsync = undefined;
                },
            });
    };
    RxWebSocket.prototype.makeStream = function (request, callId, callbackId) {
        var _this = this;
        return merge_1.merge(this.messages, defer_1.defer(function () { return _this.webSocket(); }).pipe(operators_2.tap(function (socket) { return RxWebSocket.send(socket, request.json(callId, callbackId)); }), operators_2.flatMap(function () { return rxjs_1.NEVER; })))
            .pipe(operators_1.tag("RxWebSocket_make_" + request.method + "_plain"), operators_2.flatMap(function (value) { return value instanceof Error ? rxjs_1.throwError(value) : scalar_1.scalar(value); }), operators_2.tap(function (value) { return RxWebSocket.checkError(value, callId); }), operators_2.map(function (value) { return RxWebSocket.getIdAndResult(value); })).pipe(operators_2.filter(function (_a) {
            var id = _a[0], obj = _a[1];
            return id === (callbackId ? callbackId : callId);
        }), operators_2.map(function (_a) {
            var id = _a[0], obj = _a[1];
            return obj;
        }), operators_2.tap(function (obj) { return RxWebSocket.checkEmpty(obj, request); }), operators_2.map(request.transformer), operators_1.tag("RxWebSocket_make_" + request.method));
    };
    RxWebSocket.prototype.make = function (request, callId) {
        return this.makeStream(request, callId).pipe(operators_2.first(), operators_2.timeout(this.timeout));
    };
    return RxWebSocket;
}());
exports.RxWebSocket = RxWebSocket;
//# sourceMappingURL=RxWebSocket.js.map