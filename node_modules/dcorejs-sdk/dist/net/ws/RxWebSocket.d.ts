import { Observable } from "rxjs";
import { BaseRequest } from "../models/request/BaseRequest";
import { WithCallback } from "../models/request/WithCallback";
export interface CloseEvent {
    wasClean: boolean;
    code: number;
    reason: string;
    target: any;
}
export interface MessageEvent {
    data: any;
    type: any;
    target: any;
}
export interface ErrorEvent {
    error: any;
    message: string;
    target: any;
}
export interface WebSocketContract {
    onopen?: any;
    onclose?: any;
    onmessage?: any;
    onerror?: any;
    close(code?: number, data?: string): void;
    send(data: any): void;
}
export declare type WebSocketFactory = () => WebSocketContract;
export declare class RxWebSocket {
    private webSocketFactory;
    private static checkError;
    private static getIdAndResult;
    private static checkEmpty;
    private static send;
    timeout: number;
    private callId;
    private subscriptions;
    private webSocketAsync?;
    private messages;
    private events;
    constructor(webSocketFactory: WebSocketFactory);
    isConnected(): boolean;
    request<T>(request: BaseRequest<T>): Observable<T>;
    requestStream<T>(request: BaseRequest<T> & WithCallback): Observable<T>;
    getCallId(): number;
    disconnect(): void;
    webSocket(): Observable<WebSocketContract>;
    private connect;
    private makeStream;
    private make;
}
