"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var class_transformer_1 = require("class-transformer");
var TypeAdapters_1 = require("../../utils/TypeAdapters");
var AssetAmount_1 = require("../AssetAmount");
var ChainObject_1 = require("../ChainObject");
var Memo_1 = require("../Memo");
var BaseOperation_1 = require("./BaseOperation");
var OperationType_1 = require("./OperationType");
var TransferOperation = /** @class */ (function (_super) {
    __extends(TransferOperation, _super);
    /**
     * Transfer operation constructor
     *
     * @param from account object id of the sender
     * @param to account object id or content object id of the receiver
     * @param amount an [AssetAmount] to transfer
     * @param memo optional string note
     * @param fee {@link AssetAmount} fee for the operation, if left undefined the fee will be computed in DCT asset
     */
    function TransferOperation(from, to, amount, memo, fee) {
        var _this = _super.call(this, OperationType_1.OperationType.Transfer2) || this;
        _this.from = from;
        _this.to = to;
        _this.amount = amount;
        _this.memo = memo;
        _this.fee = fee;
        return _this;
    }
    __decorate([
        TypeAdapters_1.ChainObjectToClass,
        TypeAdapters_1.ChainObjectToPlain,
        class_transformer_1.Expose({ name: "from" }),
        __metadata("design:type", ChainObject_1.ChainObject)
    ], TransferOperation.prototype, "from", void 0);
    __decorate([
        TypeAdapters_1.ChainObjectToClass,
        TypeAdapters_1.ChainObjectToPlain,
        class_transformer_1.Expose({ name: "to" }),
        __metadata("design:type", ChainObject_1.ChainObject)
    ], TransferOperation.prototype, "to", void 0);
    __decorate([
        class_transformer_1.Type(function () { return AssetAmount_1.AssetAmount; }),
        class_transformer_1.Expose({ name: "amount" }),
        __metadata("design:type", AssetAmount_1.AssetAmount)
    ], TransferOperation.prototype, "amount", void 0);
    __decorate([
        class_transformer_1.Type(function () { return Memo_1.Memo; }),
        class_transformer_1.Expose({ name: "memo" }),
        __metadata("design:type", Memo_1.Memo)
    ], TransferOperation.prototype, "memo", void 0);
    return TransferOperation;
}(BaseOperation_1.BaseOperation));
exports.TransferOperation = TransferOperation;
//# sourceMappingURL=TransferOperation.js.map