"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var class_transformer_1 = require("class-transformer");
var Long = require("long");
var TypeAdapters_1 = require("../../utils/TypeAdapters");
var Utils_1 = require("../../utils/Utils");
var AssetAmount_1 = require("../AssetAmount");
var ChainObject_1 = require("../ChainObject");
var CustodyData_1 = require("../CustodyData");
var KeyPart_1 = require("../KeyPart");
var RegionalPrice_1 = require("../RegionalPrice");
var BaseOperation_1 = require("./BaseOperation");
var OperationType_1 = require("./OperationType");
var AddOrUpdateContentOperation = /** @class */ (function (_super) {
    __extends(AddOrUpdateContentOperation, _super);
    /**
     * Request to submit content operation constructor
     *
     * @param size size of content, including samples, in megabytes
     * @param author author of the content. If co-authors is not filled, this account will receive full payout
     * @param coAuthors optional parameter. If map is not empty, payout will be split - the parameter maps co-authors
     * to basis points split, e.g. author1:9000 (bp), author2:1000 (bp)
     * @param uri URI where the content can be found
     * @param quorum how many seeders needs to cooperate to recover the key
     * @param price list of regional prices
     * @param hash hash of the content. Should be 40 chars long, hex encoded
     * @param seeders list of selected seeders
     * @param keyParts key particles, each assigned to one of the seeders, encrypted with his key
     * @param expiration content expiration time
     * @param publishingFee fee must be greater than the sum of seeders' publishing prices * number of days. Is paid by author
     * @param synopsis JSON formatted structure containing content information
     * @param custodyData if cd.n == 0 then no custody is submitted, and simplified verification is done.
     * @param fee [AssetAmount] fee for the operation, if left [BaseOperation.FEE_UNSET] the fee will be computed in DCT asset
     */
    function AddOrUpdateContentOperation(size, author, coAuthors, uri, quorum, price, hash, seeders, keyParts, expiration, publishingFee, synopsis, custodyData, fee) {
        if (coAuthors === void 0) { coAuthors = []; }
        var _this = _super.call(this, OperationType_1.OperationType.ContentSubmit) || this;
        _this.size = size;
        _this.author = author;
        _this.coAuthors = coAuthors;
        _this.uri = uri;
        _this.quorum = quorum;
        _this.price = price;
        _this.hash = hash;
        _this.seeders = seeders;
        _this.keyParts = keyParts;
        _this.expiration = expiration;
        _this.publishingFee = publishingFee;
        _this.synopsis = synopsis;
        _this.custodyData = custodyData;
        _this.fee = fee;
        return _this;
    }
    AddOrUpdateContentOperation.create = function (author, coAuthors, uri, price, expiration, synopsis, fee) {
        return new this(Long.fromNumber(1), author, coAuthors, uri, 0, [price], Utils_1.Utils.ripemd160(Buffer.from(uri)).toString("hex"), [], [], expiration, new AssetAmount_1.AssetAmount(), class_transformer_1.serialize(synopsis), undefined, fee);
    };
    __decorate([
        TypeAdapters_1.LongToClass,
        TypeAdapters_1.LongToPlain,
        class_transformer_1.Expose({ name: "size" }),
        __metadata("design:type", Long)
    ], AddOrUpdateContentOperation.prototype, "size", void 0);
    __decorate([
        TypeAdapters_1.ChainObjectToClass,
        TypeAdapters_1.ChainObjectToPlain,
        class_transformer_1.Expose({ name: "author" }),
        __metadata("design:type", ChainObject_1.ChainObject)
    ], AddOrUpdateContentOperation.prototype, "author", void 0);
    __decorate([
        TypeAdapters_1.CoAuthorsToClass,
        TypeAdapters_1.CoAuthorsToPlain,
        class_transformer_1.Expose({ name: "co_authors" }),
        __metadata("design:type", Array)
    ], AddOrUpdateContentOperation.prototype, "coAuthors", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "URI" }),
        __metadata("design:type", String)
    ], AddOrUpdateContentOperation.prototype, "uri", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "quorum" }),
        __metadata("design:type", Number)
    ], AddOrUpdateContentOperation.prototype, "quorum", void 0);
    __decorate([
        class_transformer_1.Type(function () { return RegionalPrice_1.RegionalPrice; }),
        class_transformer_1.Expose({ name: "price" }),
        __metadata("design:type", Array)
    ], AddOrUpdateContentOperation.prototype, "price", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "hash" }),
        __metadata("design:type", String)
    ], AddOrUpdateContentOperation.prototype, "hash", void 0);
    __decorate([
        TypeAdapters_1.ChainObjectArrayToClass,
        TypeAdapters_1.ChainObjectArrayToPlain,
        class_transformer_1.Expose({ name: "seeders" }),
        __metadata("design:type", Array)
    ], AddOrUpdateContentOperation.prototype, "seeders", void 0);
    __decorate([
        class_transformer_1.Type(function () { return KeyPart_1.KeyPart; }),
        class_transformer_1.Expose({ name: "key_parts" }),
        __metadata("design:type", Array)
    ], AddOrUpdateContentOperation.prototype, "keyParts", void 0);
    __decorate([
        TypeAdapters_1.MomentToClass,
        TypeAdapters_1.MomentToPlain,
        class_transformer_1.Expose({ name: "expiration" }),
        __metadata("design:type", Object)
    ], AddOrUpdateContentOperation.prototype, "expiration", void 0);
    __decorate([
        class_transformer_1.Type(function () { return AssetAmount_1.AssetAmount; }),
        class_transformer_1.Expose({ name: "publishing_fee" }),
        __metadata("design:type", AssetAmount_1.AssetAmount)
    ], AddOrUpdateContentOperation.prototype, "publishingFee", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "synopsis" }),
        __metadata("design:type", String)
    ], AddOrUpdateContentOperation.prototype, "synopsis", void 0);
    __decorate([
        class_transformer_1.Type(function () { return CustodyData_1.CustodyData; }),
        class_transformer_1.Expose({ name: "cd" }),
        __metadata("design:type", CustodyData_1.CustodyData)
    ], AddOrUpdateContentOperation.prototype, "custodyData", void 0);
    return AddOrUpdateContentOperation;
}(BaseOperation_1.BaseOperation));
exports.AddOrUpdateContentOperation = AddOrUpdateContentOperation;
//# sourceMappingURL=AddOrUpdateContentOperation.js.map