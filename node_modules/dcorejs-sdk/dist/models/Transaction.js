"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var class_transformer_1 = require("class-transformer");
var Long = require("long");
var Serializer_1 = require("../net/serialization/Serializer");
var TypeAdapters_1 = require("../utils/TypeAdapters");
var BlockData_1 = require("./BlockData");
var Transaction = /** @class */ (function () {
    function Transaction(blockData, ops, chainId) {
        this.extensions = [];
        this.blockData = blockData;
        this.operations = ops;
        this.chainId = Buffer.from(chainId, "hex");
        this.refBlockNum = this.blockData.refBlockNum;
        this.refBlockPrefix = this.blockData.refBlockPrefix;
        this.expiration = this.blockData.expiration;
    }
    Transaction.prototype.withSignature = function (key) {
        var serializer = new Serializer_1.Serializer();
        var sig;
        do {
            // increment expiration until we get dcore valid signature
            this.blockData.expiration = this.blockData.expiration.add(1, "second");
            this.expiration = this.blockData.expiration;
            var data = serializer.serialize(this);
            sig = key.sign(Buffer.concat([this.chainId, data]));
        } while (!sig);
        this.signatures = [sig];
        return this;
    };
    __decorate([
        class_transformer_1.Exclude(),
        __metadata("design:type", BlockData_1.BlockData)
    ], Transaction.prototype, "blockData", void 0);
    __decorate([
        class_transformer_1.Transform(function (values, obj) { return obj.operations.map(function (op) { return [op.type, class_transformer_1.classToPlain(op)]; }); }, { toPlainOnly: true }),
        class_transformer_1.Expose({ name: "operations" }),
        __metadata("design:type", Array)
    ], Transaction.prototype, "operations", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "signatures" }),
        __metadata("design:type", Array)
    ], Transaction.prototype, "signatures", void 0);
    __decorate([
        TypeAdapters_1.MomentToPlain,
        class_transformer_1.Expose({ name: "expiration" }),
        __metadata("design:type", Object)
    ], Transaction.prototype, "expiration", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "ref_block_num" }),
        __metadata("design:type", Number)
    ], Transaction.prototype, "refBlockNum", void 0);
    __decorate([
        TypeAdapters_1.LongToPlain,
        class_transformer_1.Expose({ name: "ref_block_prefix" }),
        __metadata("design:type", Long)
    ], Transaction.prototype, "refBlockPrefix", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "extensions" }),
        __metadata("design:type", Array)
    ], Transaction.prototype, "extensions", void 0);
    __decorate([
        class_transformer_1.Exclude(),
        __metadata("design:type", Buffer)
    ], Transaction.prototype, "chainId", void 0);
    return Transaction;
}());
exports.Transaction = Transaction;
//# sourceMappingURL=Transaction.js.map