"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var class_transformer_1 = require("class-transformer");
var decimal_js_1 = require("decimal.js");
var Long = require("long");
var DCoreConstants_1 = require("../DCoreConstants");
var TypeAdapters_1 = require("../utils/TypeAdapters");
var Utils_1 = require("../utils/Utils");
var AssetAmount_1 = require("./AssetAmount");
var AssetOptions_1 = require("./AssetOptions");
var ChainObject_1 = require("./ChainObject");
var IllegalArgumentError_1 = require("./error/IllegalArgumentError");
var Asset = /** @class */ (function () {
    function Asset() {
    }
    /**
     * Convert amount in DCT to this asset
     *
     * @param amount amount to convert
     * @param roundingMode rounding mode to use when rounding to target asset precision
     */
    Asset.prototype.convertFromDCT = function (amount, roundingMode) {
        if (roundingMode === void 0) { roundingMode = decimal_js_1.Decimal.ROUND_CEIL; }
        return this.convert(typeof amount === "number" ? Long.fromNumber(amount) : amount, this.id, roundingMode);
    };
    /**
     * Convert amount in this asset to DCT
     *
     * @param amount amount to convert
     * @param roundingMode rounding mode to use when rounding to target asset precision
     */
    Asset.prototype.convertToDCT = function (amount, roundingMode) {
        if (roundingMode === void 0) { roundingMode = decimal_js_1.Decimal.ROUND_CEIL; }
        return this.convert(typeof amount === "number" ? Long.fromNumber(amount) : amount, DCoreConstants_1.DCoreConstants.DCT_ASSET_ID, roundingMode);
    };
    Asset.prototype.convert = function (amount, toAssetId, rounding) {
        var quote = new decimal_js_1.Decimal(this.options.exchangeRate.quote.amount.toString());
        var base = new decimal_js_1.Decimal(this.options.exchangeRate.base.amount.toString());
        Utils_1.assertThrow(quote.greaterThan(0), function () { return "Quote exchange amount must be greater then 0"; });
        Utils_1.assertThrow(base.greaterThan(0), function () { return "Base exchange amount must be greater then 0"; });
        if (this.options.exchangeRate.base.assetId.eq(toAssetId)) {
            var result = quote.mul(amount.toString()).div(base);
            return new AssetAmount_1.AssetAmount(Long.fromString(result.toFixed(0, rounding)), toAssetId);
        }
        if (this.options.exchangeRate.quote.assetId.eq(toAssetId)) {
            var result = base.mul(amount.toString()).div(quote);
            return new AssetAmount_1.AssetAmount(Long.fromString(result.toFixed(0, rounding)), toAssetId);
        }
        throw new IllegalArgumentError_1.IllegalArgumentError("cannot convert " + toAssetId + " with " + this.symbol + ":" + this.id);
    };
    __decorate([
        TypeAdapters_1.ChainObjectToClass,
        class_transformer_1.Expose({ name: "id" }),
        __metadata("design:type", ChainObject_1.ChainObject)
    ], Asset.prototype, "id", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "symbol" }),
        __metadata("design:type", String)
    ], Asset.prototype, "symbol", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "precision" }),
        __metadata("design:type", Number)
    ], Asset.prototype, "precision", void 0);
    __decorate([
        TypeAdapters_1.ChainObjectToClass,
        class_transformer_1.Expose({ name: "issuer" }),
        __metadata("design:type", ChainObject_1.ChainObject)
    ], Asset.prototype, "issuer", void 0);
    __decorate([
        class_transformer_1.Expose({ name: "description" }),
        __metadata("design:type", String)
    ], Asset.prototype, "description", void 0);
    __decorate([
        class_transformer_1.Type(function () { return AssetOptions_1.AssetOptions; }),
        class_transformer_1.Expose({ name: "options" }),
        __metadata("design:type", AssetOptions_1.AssetOptions)
    ], Asset.prototype, "options", void 0);
    __decorate([
        TypeAdapters_1.ChainObjectToClass,
        class_transformer_1.Expose({ name: "dynamic_asset_data_id" }),
        __metadata("design:type", ChainObject_1.ChainObject)
    ], Asset.prototype, "dynamicAssetDataId", void 0);
    return Asset;
}());
exports.Asset = Asset;
//# sourceMappingURL=Asset.js.map