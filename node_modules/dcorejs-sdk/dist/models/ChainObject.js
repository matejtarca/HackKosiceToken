"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ByteBuffer = require("bytebuffer");
var _ = require("lodash");
var Long = require("long");
var ObjectType_1 = require("./ObjectType");
var ChainObject = /** @class */ (function () {
    function ChainObject(objectId) {
        this.instance = Long.fromNumber(0);
        this.fullBytes = Buffer.alloc(0);
        if (typeof objectId === "string") {
            var group = ChainObject.regexp.exec(objectId);
            this.objectType = ObjectType_1.ObjectType.types[+group[1]][+group[2]];
            this.instance = Long.fromString(group[3], true);
            this.objectId = objectId;
            this.fullBytes = new ByteBuffer(8, ByteBuffer.LITTLE_ENDIAN)
                // @ts-ignore fails on instance of Long, force a string
                .writeUint64(this.instance.toString()).reset().skip(6)
                .writeByte(this.objectType.type).writeByte(this.objectType.space).buffer;
        }
        else {
            this.objectType = objectId;
            this.objectId = this.objectType.space + "." + this.objectType.type + "." + this.instance;
        }
    }
    ChainObject.parse = function (id) {
        if (this.isValid(id)) {
            return new ChainObject(id);
        }
        else {
            throw TypeError("not a valid chain id:" + id);
        }
    };
    ChainObject.isValid = function (id) {
        return ChainObject.regexp.test(id);
    };
    ChainObject.prototype.eq = function (other) {
        return !_.isNil(other) && this.objectId === other.objectId;
    };
    ChainObject.regexp = /^([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?$/;
    return ChainObject;
}());
exports.ChainObject = ChainObject;
//# sourceMappingURL=ChainObject.js.map