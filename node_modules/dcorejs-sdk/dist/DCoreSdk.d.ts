import { Duration } from "moment";
import { CoreOptions } from "request";
import { Observable } from "rxjs";
import { DCoreApi } from "./DCoreApi";
import { Asset } from "./models/Asset";
import { AssetAmount } from "./models/AssetAmount";
import { ChainObject } from "./models/ChainObject";
import { BaseOperation } from "./models/operation/BaseOperation";
import { Transaction } from "./models/Transaction";
import { BaseRequest } from "./net/models/request/BaseRequest";
import { WithCallback } from "./net/models/request/WithCallback";
import { RpcService } from "./net/rpc/RpcService";
import { RxWebSocket, WebSocketFactory } from "./net/ws/RxWebSocket";
export declare type AccountRef = ChainObject | string;
export declare type AssetWithAmount = [Asset, AssetAmount];
export declare class DCoreSdk {
    private rpc?;
    private ws?;
    static createForHttp(options: CoreOptions): DCoreApi;
    static createForWebSocket(factory: WebSocketFactory): DCoreApi;
    static create(options: CoreOptions, factory: WebSocketFactory): DCoreApi;
    private chainId?;
    constructor(rpc?: RpcService | undefined, ws?: RxWebSocket | undefined);
    requestStream<T>(request: BaseRequest<T> & WithCallback): Observable<T>;
    request<T>(request: BaseRequest<T>): Observable<T>;
    timeout: number;
    disconnect(): void;
    prepareTransaction(operations: BaseOperation[], transactionExpiration: Duration): Observable<Transaction>;
}
